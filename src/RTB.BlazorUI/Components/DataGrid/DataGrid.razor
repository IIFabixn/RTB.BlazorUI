@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using RTB.Blazor.Components.DataGrid
@using RTB.Blazor.Components.Layout
@using RTB.Blazor.Extensions
@using RTB.Blazor.Interfaces
@using RTB.Blazor.Services.Input

@typeparam TRow where TRow : class

@attribute [CascadingTypeParameter(nameof(TRow))]

@inherits RTBComponent

@inject IInputService InputService

@implements IRegister<ColumnBase<TRow>>

@code {
    [Parameter] public IEnumerable<TRow> Items { get; set; } = [];
    [Parameter] public RenderFragment Columns { get; set; } = default!;

    [Parameter] public TRow? SelectedRow { get; set; }
    [Parameter] public EventCallback<TRow> SelectedRowChanged { get; set; }
    
    [Parameter] public IEnumerable<TRow> SelectedRows { get; set; } = [];
    [Parameter] public EventCallback<IEnumerable<TRow>> SelectedRowsChanged { get; set; }

    [Parameter] public string? HeaderClass { get; set; }
    [Parameter] public string? RowClass { get; set; }
    [Parameter] public string? ActiveRowClass { get; set; } = "active";

    [Parameter] public int OverscanCount { get; set; } = 3;
    [Parameter] public SizeExpression? ItemSize { get; set; }

    [Parameter] public bool Virtualize { get; set; }

    [Parameter] public RTBColor? Background { get; set; }
}

<!-- registers the <DataColumn>s -->
<CascadingValue Value="this" IsFixed>
    @Columns
</CascadingValue>

<GridView Background="@Background" 
    Columns="@GridTemplate()" 
    Rows="@($"repeat({_sortedItems.Count}, minmax(min-content, max-content))")" 
    Class="@CombineClass("rtb-datagrid", Class, "overflow", "relative")">
    @* ---------- Header cells (row 1) ------------------------ *@
    @for (var colIdx = 1; colIdx <= _columns.Count; colIdx++)
    {
        var col = _columns[colIdx - 1];
        <Stack
            Horizontal
            AlignItem="@Flex.Align.Center"
            JustifyContent="@Flex.Justify.SpaceBetween"
            Class="@HeaderClass"
        >
            <Positioned Position="@Positioned.PositionMode.Sticky" Top="0" />

            @(builder => col.RenderHeader(builder, colIdx))
            @if (col.CanSort)
            {
                <button @onclick="() => ToggleSort(col)" class="cursor-pointer">@(col.SortDescending ? "▼" : "▲")</button>
            }
        </Stack>
    }

    @if (Virtualize)
    {
        <Virtualize Items="_sortedItems" Context="row" OverscanCount="@OverscanCount">
            <!-- ---------- Data cells (rows 2…N) ----------------------- -->
            @* display:contents will not create a new element in the dom *@
            <div style="display:contents" class="@CombineClass(RowClass, (row.Equals(SelectedRow) ? ActiveRowClass : null), (SelectedRows?.Any(r => row.Equals(r)) ?? false) ? ActiveRowClass : null)" @onclick="() => SelectRow(row)">
                @for (var colIdx = 1; colIdx <= _columns.Count; colIdx++)
                {
                    var col = _columns[colIdx - 1];
                    @(builder => col.RenderCell(builder, row, colIdx))
                }
            </div>
        </Virtualize>
    }
    else
    {
        @foreach(var row in _sortedItems)
        {
            <!-- ---------- Data cells (rows 2…N) ----------------------- -->
            @* display:contents will not create a new element in the dom *@
            <div style="display:contents" class="@CombineClass(RowClass, (row.Equals(SelectedRow) || (SelectedRows?.Any(r => row.Equals(r)) ?? false) ? ActiveRowClass : null))" @onclick="() => SelectRow(row)">
                @for (var colIdx = 1; colIdx <= _columns.Count; colIdx++)
                {
                    var col = _columns[colIdx - 1];
                    @(builder => col.RenderCell(builder, row, colIdx))
                }
            </div>
        }
    }
</GridView>

@code {
    private List<ColumnBase<TRow>> _columns = [];
    private SortInfo? _sort;
    private SortInfo? CurrentSort
    {
        get => _sort;
        set => SetProperty(ref _sort, value);
    }

    private List<TRow> _sortedItems = [];

    ///  <summary>
    /// Indicates whenever the Shift Key is pressed.
    /// </summary>
    private bool _shiftDown = false;

    private TRow? _lastSelected = null;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await InputService.InitializeAsync();
        InputService.RegisterKeyHandler("Shift", (pressed) => InvokeAsync(() => SetProperty(ref _shiftDown, pressed)));
    }

    protected override void OnParametersSet()
    {
        if (CurrentSort is null)
        {
            var firstSortable = _columns.FirstOrDefault(c => c.CanSort);
            if (firstSortable is not null)
                CurrentSort = new(firstSortable, firstSortable.DefaultSortDescending);
        }

        SetProperty(ref _sortedItems, SortItems());
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return; // only on first render


        if (_columns.Count == 0) return; // no columns registered

        CurrentSort ??= _columns.TryGetItem(i => i.CanSort, out var col) ? new(col, col.SortDescending) : null;

        SetProperty(ref _sortedItems, SortItems());
        StateHasChanged(); // trigger rerender
    }

    private List<TRow> SortItems()
    {
        if (CurrentSort is { Column.SortKey: not null } s)
        {
            return (s.Descending
                ? Items.OrderByDescending(s.Column.SortKey!)
                : Items.OrderBy(s.Column.SortKey!)).ToList();
        }

        return Items.ToList();
    }

    private string GridTemplate()
    {
        return string.Join(' ', _columns.Select(c =>
        {
            if (c.MinWidth != null || c.MaxWidth != null)
            {
                var min = c.MinWidth ?? c.Width ?? "max-content";
                var max = c.MaxWidth ?? "1fr";
                return $"minmax({min}, {max})";
            }

            return c.Width ?? "max-content";
        }));
    }

    public void Register(ColumnBase<TRow> column)
    {
        if (_columns.Any(i => i.Guid == column.Guid)) return;

        _columns.Add(column);
        StateHasChanged();
    }

    public void Unregister(ColumnBase<TRow> column)
    {
        if (!_columns.Any(i => i.Guid == column.Guid)) return;

        _columns.Remove(column);
        StateHasChanged();
    }

    private void ToggleSort(IColumn<TRow> column)
    {
        if (!column.CanSort) return;
        column.SortDescending = !column.SortDescending; // toggle sort direction
        CurrentSort = CurrentSort?.Column == column
            ? CurrentSort with { Descending = column.SortDescending } // toggle direction
            : new(column, column.SortDescending); // new column selected

        SetProperty(ref _sortedItems, SortItems());
    }

    private record SortInfo(IColumn<TRow> Column, bool Descending);

    private void SelectRow(TRow row)
    {
        var list = SelectedRows?.ToList() ?? new List<TRow>();

        if (SelectedRowsChanged.HasDelegate)
        {
            // Multi Select
            if (_shiftDown)
            {
                _lastSelected ??= Items.First();
                var items = Items.ToList();
                var start = Math.Min(items.IndexOf(_lastSelected), items.IndexOf(row));
                var end = Math.Max(items.IndexOf(_lastSelected), items.IndexOf(row));
                list = items.Skip(start).Take(end - start + 1).ToList();
            }
            else
            {
                if (list.Contains(row)) list.Remove(row);
                else list.Add(row);
            }
            
            SelectedRowsChanged.InvokeAsync(list);
        }
        else if (SelectedRowChanged.HasDelegate)
        {
            // Single Select
            list.Clear();
            list.Add(row);
            SelectedRowChanged.InvokeAsync(row);
        }

        _lastSelected = row; // Update last selected to store it as a pivot.
    }
}