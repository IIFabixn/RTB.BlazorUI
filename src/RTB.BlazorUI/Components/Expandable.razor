@using RTB.Blazor.UI.Extensions

@inherits RTBComponent

@code {
    [Parameter, EditorRequired] public RenderFragment Activator { get; set; } = default!;
    [Parameter, EditorRequired] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter] public bool InitiallyExpanded { get; set; } = false;
}

<Stack 
    Vertical
    Class="@CombineClass("rtb-expandable", Class)"
>
    <Styled Context="ActivatorClass">
        <Size FullWidth />

        <div class="@CombineClass("rtb-activator", ActivatorClass)"
             @onclick="ToggleMenu"
             @onclick:stopPropagation>
            @Activator
        </div>
    </Styled>

    @if (IsOpen)
    {
        @ChildContent
    }
</Stack>

@code {
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            IsOpen = InitiallyExpanded;
        }
    }

    private bool _isOpen;
    private bool IsOpen
    {
        get => _isOpen;
        set
        {
            SetProperty(ref _isOpen, value);
            OnStateChanged?.Invoke();
        }
    }
    public event Action? OnStateChanged;

    private void ToggleMenu()
    {
        IsOpen = !IsOpen;
        StateHasChanged();
    }

    public void CloseMenu() => IsOpen = false;
    public void OpenMenu() => IsOpen = true;
}
