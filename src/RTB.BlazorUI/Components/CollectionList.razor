@typeparam TItem

@inherits RTBComponent

@using Microsoft.AspNetCore.Components.Web.Virtualization
@using RTB.Blazor.Components
@using RTB.Blazor.Components.Layout
@using RTB.Blazor.Extensions

@code {
    [Parameter] public IEnumerable<TItem> Items { get; set; } = [];
    [Parameter] public RenderFragment? HeaderTemplate { get; set; }
    [Parameter] public RenderFragment<TItem>? ItemTemplate { get; set; }
    [Parameter] public RenderFragment? EmptyView { get; set; }

    [Parameter] public bool Virtualize { get; set; }

    [Parameter] public bool Horizontal { get; set; } = false;

    [Parameter] public Spacing? Spacing { get; set; }
    [Parameter] public Spacing[]? Margin { get; set; }
    [Parameter] public Spacing[]? Padding { get; set; }
}

<Stack
    Margin="@Margin"
    Padding="@Padding"
    Horizontal="@Horizontal"
    Vertical="@(!Horizontal)"
    Class="@Class"
    Gap="@Spacing"
>
    @if (Items.Any())
    {
        @if(Virtualize)
        {
            <Virtualize Items="@Items.ToList()" Context="item">
                @ItemTemplate?.Invoke(item)
            </Virtualize>
        }
        else
        {
            foreach(var item in Items)
            {
                @ItemTemplate?.Invoke(item)
            }
        }
    }
    else
    {
        @EmptyView
    }
</Stack>