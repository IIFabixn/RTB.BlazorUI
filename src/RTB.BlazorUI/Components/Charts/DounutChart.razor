@using SkiaSharp
@using SkiaSharp.Views.Blazor

@inherits ChartBase

<GridView Rows="1fr auto">
    <Styled Context="DonutChartClass">
        <Positioned Position="@Positioned.PositionMode.Relative" />

        <GridView ItemPlacement="@Place.Center" Class="@DonutChartClass">
            <Styled Context="ChartClass">
                <Size FullHeight FullWidth />

                <SKCanvasView class="@ChartClass" OnPaintSurface="PaintDonut" EnableRenderLoop />
            </Styled>

            <Styled Context="TotalValClass">
                <Positioned Position="@Positioned.PositionMode.Absolute" Top="@SizeUnit.Percent(50)" Left="@SizeUnit.Percent(50)" />
                <Other Property="transform" Value="translate(-50%, -50%)" />

                <h3 class="@TotalValClass">@TotalValue</h3>
            </Styled>
        </GridView>
    </Styled>

    <Stack Horizontal AlignItem="@Flex.Align.Center" JustifyContent="@Flex.Justify.Center" Gap="@Spacing.Rem(1)" Wrap="@Flex.WrapMode.Wrap">
        @foreach (var entry in Entries.Where(e => e.Value > 0))
        {
            <Stack Horizontal Gap="@Spacing.Rem(1)" AlignItem="@Flex.Align.Center" JustifyContent="@Flex.Justify.Center">
                <Styled Context="LabelIndicatorClass">
                    <Size Width="@SizeUnit.Rem(1)" Height="@SizeUnit.Rem(1)" />
                    <Border Radius="@SizeUnit.Rem(1)" />
                    <Flex Shrink="0" />

                    <div class="@LabelIndicatorClass" style="background-color: #@(entry.Color?.ToString().Substring(3) ?? RTBColors.White);"></div>
                </Styled>
                <h4>@entry.Label (@entry.Value)</h4>
            </Stack>
        }
    </Stack>
</GridView>

@code {
    private void PaintDonut(SKPaintSurfaceEventArgs args)
    {
        var canvas = args.Surface.Canvas;
        canvas.Clear(SKColors.White);

        var outerRadius = Math.Min(args.Info.Width, args.Info.Height) * 0.4f;
        var innerRadius = outerRadius * 0.6f; // Adjust this to control the thickness of the donut
        var center = new SKPoint(args.Info.Width / 2f, args.Info.Height / 2f);

        float start = -90f; // Start at 12-o’clock
        float gapAngle = 2f; // Gap angle in degrees
        using var paint = new SKPaint
            {
                IsAntialias = true,
                Style = SKPaintStyle.Fill,
                StrokeWidth = 0 // Ensure no stroke is applied
            };

        paint.Color = SKColors.LightGray;
        canvas.DrawCircle(center.X, center.Y, innerRadius - 4f, paint);

        foreach (var entry in Entries)
        {
            if (entry.Value <= 0) continue;

            float sweep = 360f * (entry.Value / TotalValue) - gapAngle; // Reduce sweep by gap angle
            paint.Color = entry.Color ?? throw new InvalidDataException($"Entry {entry.Label} does not have a Color associated with it.");

            using var path = new SKPath();
            path.AddArc(new SKRect(center.X - outerRadius, center.Y - outerRadius, center.X + outerRadius, center.Y + outerRadius), start, sweep);
            path.ArcTo(new SKRect(center.X - innerRadius, center.Y - innerRadius, center.X + innerRadius, center.Y + innerRadius), start + sweep, -sweep, false);

            path.Close();
            canvas.DrawPath(path, paint);
            start += sweep + gapAngle; // Add gap angle to the start for the next segment
        }
    }
}