@using SkiaSharp
@using SkiaSharp.Views.Blazor

@inherits ChartBase

<GridView Rows="1fr auto" Class="w-full">
    <Styled Context="BarChartClass">
        <Size FullHeight FullWidth />

        <SKCanvasView class="@BarChartClass" OnPaintSurface="PaintBars" EnableRenderLoop />
    </Styled>

    <Stack Horizontal AlignItem="@Flex.Align.Center" Gap="@Spacing.Rem(1)" Wrap="@Flex.WrapMode.Wrap">
        @foreach (var entry in Entries)
        {
            <Stack Horizontal AlignItem="@Flex.Align.Center" JustifyContent="@Flex.Justify.Center" Gap="@Spacing.Rem(1)">
                <Styled Context="LabelItemClass">
                    <Size Width="@SizeUnit.Rem(1)" Height="@SizeUnit.Rem(1)" />
                    <Border Radius="@SizeUnit.Rem(1)" />
                    <Flex Shrink="0" />

                    <div class="@LabelItemClass" style="background-color: #@(entry.Color?.ToString().Substring(3) ?? RTBColors.White);"></div>
                </Styled>
                <h4>@entry.Label</h4>
            </Stack>
        }
    </Stack>
</GridView>

@code {
    private void PaintBars(SKPaintSurfaceEventArgs args)
    {
        var canvas = args.Surface.Canvas;
        canvas.Clear(SKColors.White);
        var info = args.Info;
        float margin = 40;
        float barW = (info.Width - 2 * margin) / (Entries.Count * 2f);

        using var paint = new SKPaint { IsAntialias = true };

        for (int i = 0; i < Entries.Count; i++)
        {
            float h = (Entries[i].Value / MaxValue) * (info.Height - 2 * margin);
            float x = margin + barW * (1 + 2 * i);
            float y = info.Height - margin - h;

            paint.Color = Entries[i].Color ?? SKColors.Red;
            canvas.DrawRoundRect(x, y, barW, h, 6, 6, paint);
        }
    }
}