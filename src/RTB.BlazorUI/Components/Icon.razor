@using RTB.Blazor.UI.Extensions
@using System.Text.RegularExpressions
@inject HttpClient HttpClient

@inherits RTBComponent

@code {
	/// <summary>
	/// Use RTB Icons
	/// </summary>
	[Parameter] public string IconName { get; set; } = string.Empty;
	/// <summary>
	/// Custom Path to svg file
	/// </summary>
	[Parameter] public string? Path { get; set; }

	[Parameter] public SizeUnit Width { get; set; } = "24px";
	[Parameter] public SizeUnit Height { get; set; } = "24px";

    [Parameter] public RTBColor? Stroke { get; set; }
    [Parameter] public RTBColor? Fill { get; set; }

	private static readonly Dictionary<string, string> IconCache = new();
    private string _iconPath => Path ?? $"_content/RTB.Blazor.UI/icons/{IconName}.svg";

	private MarkupString? _iconContent;

	protected override async Task OnParametersSetAsync()
	{
		var path = Path ?? $"_content/RTB.Blazor.UI/icons/{IconName}.svg";
		if (!IconCache.TryGetValue(path, out var content))
		{
			var iconContent = await HttpClient.GetStringAsync(path);
			IconCache[IconName] = iconContent;
			content = IconCache[IconName];
		}

		if (content is { Length: > 0 })
		{
			_iconContent = InjectDimensions(content);
		}
		else
		{
			throw new Exception($"Icon not found: {path}");
		}
	}

	private MarkupString InjectDimensions(string content)
	{
		var updatedSvg = Regex.Replace(
			content,
			@"<svg([^>]*)>",
			$"<svg$1 width=\"{Width}\" height=\"{Height}\" class=\"{Class}\" stroke=\"{(Stroke?.HexRgba ?? "currentColor")}\" fill=\"{(Fill?.HexRgba ?? "currentColor")}\">",
			RegexOptions.IgnoreCase | RegexOptions.Multiline
		);
		
		return new MarkupString(updatedSvg);
	}
}

<img src="@_iconPath" alt="@IconName" width="@Width" height="@Height" />