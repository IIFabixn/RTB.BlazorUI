@using RTB.Blazor.UI.Extensions

@using static RTB.Blazor.Styled.Components.Flex

@inherits RTBComponent

@code {
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;

    [Parameter] public bool Horizontal { get; set; }
    [Parameter] public bool Vertical { get; set; }
    [Parameter] public bool Reverse { get; set; }

    [Parameter] public Spacing? Gap { get; set; }
    [Parameter] public WrapMode? Wrap { get; set; }
    [Parameter] public Align? AlignItem { get; set; }
    [Parameter] public Justify? JustifyContent { get; set; }

    [Parameter] public int? Shrink { get; set; }
    [Parameter] public int? Grow { get; set; }

    [Parameter] public Spacing[]? Padding { get; set; }
    [Parameter] public Spacing[]? Margin { get; set; }
}

<Styled Context="ComponentClass">
    <Flex 
        Direction="@GetDirection" 
        Gap="@Gap" 
        AlignItems="@AlignItem"
        JustifyContent="@JustifyContent"
        Shrink="@Shrink" 
        Grow="@Grow"
        Wrap="@Wrap"
    />

    @if (Padding is not null and {Length: > 0})
    {
        @switch (Padding.Length)
        {
            case 1:
                <Padding All="@Padding[0]" Condition="@(Padding is { Length: 1 })" />
                break;
            case 2:
                <Padding Vertical="Padding[0]" Horizontal="@Padding[1]" Condition="@(Padding is { Length: 2 })" />
                break;
            case 3:
                <Padding Top="@Padding[0]" Horizontal="@Padding[1]" Bottom="@Padding[2]" Condition="@(Padding is { Length: 3 })" />
                break;
            case 4:
                <Padding Top="@Padding[0]" Right="@Padding[1]" Bottom="@Padding[2]" Left="@Padding[3]" Condition="@(Padding is { Length: 4 })" />
                break;
        }
    }

    @if (Margin is not null and { Length: > 0 })
    {
        @switch (Margin.Length)
        {
            case 1:
                <Margin All="@Margin[0]" Condition="@(Margin is { Length: 1 })" />
                break;
            case 2:
                <Margin Vertical="Margin[0]" Horizontal="@Margin[1]" Condition="@(Margin is { Length: 2 })" />
                break;
            case 3:
                <Margin Top="@Margin[0]" Horizontal="@Margin[1]" Bottom="@Margin[2]" Condition="@(Margin is { Length: 3 })" />
                break;
            case 4:
                <Margin Top="@Margin[0]" Right="@Margin[1]" Bottom="@Margin[2]" Left="@Margin[3]" Condition="@(Margin is { Length: 4 })" />
                break;
        }
    }
        
    <div class="@CombineClass("Stack", ComponentClass, Class)">
        @ChildContent
    </div>
</Styled>

@code {
    private AxisDirection? GetDirection => (Horizontal, Vertical, Reverse) switch
        {
            (true, false, false) => AxisDirection.Row,
            (false, true, false) => AxisDirection.Column,
            (true, false, true) => AxisDirection.RowReverse,
            (false, true, true) => AxisDirection.ColumnReverse,
            _ => null
        };
}