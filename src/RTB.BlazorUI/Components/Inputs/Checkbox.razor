@using RTB.BlazorUI.Styles
@inherits RTBComponent

@code {
    [Parameter] public string? LabelText { get; set; }
    [Parameter] public TextStyle? LabelTextStyle { get; set; }
    [Parameter] public RenderFragment? LabelContent { get; set; }

    [Parameter] public string? CheckboxClass { get; set; }

    [Parameter] public bool Checked { get; set; } = false;
    [Parameter] public EventCallback<bool> CheckedChanged { get; set; }

    private readonly string InputId = $"checkbox-{Guid.NewGuid().ToString("N").Substring(8)}";

    private Task Toggle() => CheckedChanged.HasDelegate ? CheckedChanged.InvokeAsync(!Checked) : Task.CompletedTask;
}

<Stack JustifyContent="@Flex.Justify.SpaceBetween" Class="@Class">
    <label for="@InputId">
        @if (LabelContent != null)
        {
            @LabelContent
        }

        @if (!string.IsNullOrEmpty(LabelText))
        {
            <RTB.BlazorUI.Components.Text TextStyle="@LabelTextStyle">@LabelText</RTB.BlazorUI.Components.Text>
        }
    </label>
    <input id="@InputId" class="@CheckboxClass" type="checkbox" checked="@Checked" @onchange="@(() => Toggle())" />
</Stack>