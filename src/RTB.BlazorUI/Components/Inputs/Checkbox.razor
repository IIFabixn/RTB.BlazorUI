@using RTB.Blazor.UI.Styles

@inherits RTBComponent

@code {
    [Parameter] public string? LabelClass { get; set; }
    [Parameter] public RenderFragment? LabelContent { get; set; }

    [Parameter] public string? LabelText { get; set; }
    [Parameter] public TextStyle? LabelTextStyle { get; set; }

    [Parameter] public string? InputClass { get; set; }
    [Parameter] public RenderFragment<bool>? CustomCheckbox { get; set; }

    [Parameter] public bool Checked { get; set; } = false;
    [Parameter] public EventCallback<bool> CheckedChanged { get; set; }

    [Parameter] public string InputId { get; set; } = $"rtb-cb-{Guid.NewGuid().ToString("N").Substring(8)}";

    [Parameter] public Position LabelPosition { get; set; } = Position.Top;

    [Parameter] public bool ReadOnly { get; set; } = false;

    private Flex.AxisDirection GetDirection() => LabelPosition switch
    {
        Position.Top => Flex.AxisDirection.Column,
        Position.Right => Flex.AxisDirection.Row,
        Position.Bottom => Flex.AxisDirection.ColumnReverse,
        Position.Left => Flex.AxisDirection.RowReverse,
        _ => Flex.AxisDirection.Column
    };

    public Task Toggle() {
        if (ReadOnly) return Task.CompletedTask;
        if (CheckedChanged.HasDelegate) CheckedChanged.InvokeAsync(!Checked);
        return Task.CompletedTask;
    }
}
@if (!string.IsNullOrEmpty(LabelText) || LabelContent is not null)
{
    <label class="@LabelClass" for="@InputId">
        @(LabelContent ?? (@<RTB.Blazor.UI.Components.Text TextStyle="@LabelTextStyle">@LabelText</RTB.Blazor.UI.Components.Text>))
    </label>
}

@(
    CustomCheckbox?.Invoke(Checked) 
    ?? (@<input disabled="@ReadOnly" id="@InputId" class="@InputClass" type="checkbox" checked="@Checked" @onchange="@((v) => CheckedChanged.InvokeAsync((bool?)v.Value ?? false))" />)
)
