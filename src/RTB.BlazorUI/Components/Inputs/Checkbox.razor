@using RTB.Blazor
@using RTB.Blazor.Styles

@inherits RTBComponent

@code {
    [Parameter] public string? LabelClass { get; set; }
    [Parameter] public RenderFragment? LabelContent { get; set; }

    [Parameter] public string? LabelText { get; set; }
    [Parameter] public TextStyle? LabelTextStyle { get; set; }

    [Parameter] public string? InputClass { get; set; }
    [Parameter] public RenderFragment<bool>? CustomCheckbox { get; set; }

    [Parameter] public bool Checked { get; set; } = false;
    [Parameter] public EventCallback<bool> CheckedChanged { get; set; }

    [Parameter] public string InputId { get; set; } = $"rtb-cb-{Guid.NewGuid().ToString("N").Substring(8)}";

    [Parameter] public bool ReadOnly { get; set; } = false;

    public void Toggle(bool value) {
        if (ReadOnly) return;
        if (CheckedChanged.HasDelegate) CheckedChanged.InvokeAsync(value);
    }
}

@if (!string.IsNullOrEmpty(LabelText) || LabelContent is not null)
{
    <label class="@LabelClass" for="@InputId">
        @(LabelContent ?? (@<RTBText TextStyle="@LabelTextStyle">@LabelText</RTBText>))
    </label>
}

@(
    CustomCheckbox?.Invoke(Checked) 
    ?? (@<input disabled="@ReadOnly" id="@InputId" class="@InputClass" type="checkbox" checked="@Checked" @onchange="@((v) => Toggle((bool?)v.Value ?? false))" />)
)
