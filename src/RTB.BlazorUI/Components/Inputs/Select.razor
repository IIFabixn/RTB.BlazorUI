@using System.Globalization
@using RTB.Blazor.Styles
@using RTB.Blazor.Extensions
@using static RTB.Blazor.Components.FlyoutMenu

@inherits RTBComponent

@typeparam TOption

@inject IJSRuntime JSRuntime

@code {
    [Parameter, EditorRequired] public required IEnumerable<TOption> Options { get; set; }
    [Parameter] public TOption? SelectedOption { get; set; }
    [Parameter] public EventCallback<TOption?> SelectedOptionChanged { get; set; }
    [Parameter] public Func<TOption?, string> OptionValue { get; set; } = (option) => option?.ToString() ?? string.Empty;
    [Parameter] public Func<TOption?, string> OptionLabel { get; set; } = (option) => option?.ToString() ?? string.Empty;

    [Parameter] public string EmptyOption { get; set; } = string.Empty;

    [Parameter] public string? LabelClass { get; set; }
    [Parameter] public required RenderFragment LabelContent { get; set; }
    [Parameter] public string? LabelText { get; set; }
    [Parameter] public RTBColor? LabelColor { get; set; }
    [Parameter] public TextStyle? LabelTextStyle { get; set; }

    [Parameter] public RTBColor? Background { get; set; }
    [Parameter] public RTBColor? ActiveTextColor { get; set; }
    [Parameter] public RTBColor? OptionTextColor { get; set; }

    private readonly string FlyoutId = $"flyout-{Guid.NewGuid().ToString("N").Substring(0, 8)}";
}

@if(LabelContent is not null || !string.IsNullOrEmpty(LabelText))
{
    <label for="@(Id ?? FlyoutId)" class="@LabelClass">
        @(LabelContent ?? (@<RTBText Element="span" TextStyle="@LabelTextStyle" Color="@LabelColor">@LabelText</RTBText>))
    </label>
}

<Styled Context="SelectClass">
    <Background Color="@Background" />
    <Color Value="@ActiveTextColor" />

    <select class="@(CombineClass(SelectClass, Class))" id="@(Id ?? FlyoutId)" @onchange="@(v => SetValue(v.Value))">
        <Styled Context="OptionStyleClass">
            <Color Value="@OptionTextColor" />

            @if(!string.IsNullOrEmpty(EmptyOption))
            {
                <option class="@OptionStyleClass" value="" selected="@(SelectedOption is null)">@EmptyOption</option>
            }

            @foreach (var item in Options)
            {
                var isSelected = SelectedOption is not null && (item?.Equals(SelectedOption) ?? false);

                <option class="@OptionStyleClass" label="@OptionLabel(item)" value="@OptionValue(item)" selected="@isSelected">
                </option>
            }
        </Styled>
    </select>
</Styled>

@code {
    private Dictionary<string, TOption> _optionValues = new();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _optionValues.Clear();
        foreach(var option in Options)
        {
            var value = OptionValue(option);
            if (!_optionValues.ContainsKey(value))
            {
                _optionValues[value] = option;
            }
        }
    }

    private void SetValue(object? value)
    {
        if (value is null || !_optionValues.TryGetValue(value.ToString() ?? string.Empty, out var o))
        {
            // If the value is null or not found, reset the selected option
            SelectedOptionChanged.InvokeAsync(default(TOption));
            return;
        }

        SelectedOptionChanged.InvokeAsync(o);
    }
}
