@using RTB.Blazor.UI.Extensions
@using static RTB.Blazor.UI.Components.FlyoutMenu
@inherits RTBComponent

@typeparam TOption

@inject IJSRuntime JSRuntime

@code {
    [Parameter, EditorRequired] public required ICollection<TOption> Options { get; set; }

    [Parameter, EditorRequired] public required RenderFragment<TOption?> ActionContent { get; set; }
    [Parameter, EditorRequired] public required RenderFragment<TOption> OptionTemplate { get; set; }

    [Parameter] public TOption? SelectedOption { get; set; }
    [Parameter] public EventCallback<TOption> SelectedOptionChanged { get; set; }

    [Parameter] public string? ContentClass { get; set; }
    [Parameter] public string? ItemClass { get; set; }

    [Parameter] public FlyoutPosition Anchor { get; set; } = FlyoutPosition.Bottom;

    [Parameter] public bool Multiple { get; set; }

    private readonly string FlyoutId = $"flyout-{Guid.NewGuid().ToString("N").Substring(0, 8)}";

    private string GetAnchorPosition()
    {
        string position = string.Empty;
        if (Anchor.HasFlag(FlyoutPosition.Top)) position += "top ";
        if (Anchor.HasFlag(FlyoutPosition.Right)) position += "right";
        if (Anchor.HasFlag(FlyoutPosition.Bottom)) position += "bottom ";
        if (Anchor.HasFlag(FlyoutPosition.Left)) position += "left ";

        return position.Trim();
    }
}

<button popovertarget="@FlyoutId" class="@Class" style="@($"anchor-name: --{FlyoutId};")">
    @ActionContent.Invoke(SelectedOption)
</button>


<Styled Context="MenuClass">
    <Other Property="position" Value="absolute" />
    <Other Property="position-visibility" Value="always" />
    <Other Property="position-area" Value="@(GetAnchorPosition())" />

    <Overflow />
    <Other Property="max-height" Value="-webkit-fill-available" />
    <Other Property="min-width" Value="anchor-size(width)" />
    <Margin All="0" />

    <Selector Query="&:popover-open">
        <Flex Direction="@Flex.AxisDirection.Column" />
    </Selector>

    <div class="@MenuClass @ContentClass" popover id="@FlyoutId" style="position-anchor: --@(FlyoutId);">
        <CollectionList Virtualize Vertical Items="@Options" TItem="TOption">
            <ItemTemplate Context="item">
                <button class="@ItemClass" popovertarget="@FlyoutId" popovertargetaction="hide" @onclick="@(() => HandleSelection(item))">
                    @OptionTemplate.Invoke(item)
                </button>
            </ItemTemplate>
        </CollectionList>
    </div>
</Styled>

@code {

    private void HandleSelection(TOption item)
    {
        if(item is not null && !item.Equals(SelectedOption))
        {
            SelectedOption = item;
            if (SelectedOptionChanged.HasDelegate)
                SelectedOptionChanged.InvokeAsync(item);
        }
    }

    public async ValueTask Show()
    {
        await JSRuntime.InvokeVoidAsync("popoverHelper.show", FlyoutId);
    }

    public async ValueTask Hide()
    {
        await JSRuntime.InvokeVoidAsync("popoverHelper.close", FlyoutId);
    }

    public async ValueTask Toggle()
    {
        await JSRuntime.InvokeVoidAsync("popoverHelper.toggle", FlyoutId);
    }

    public enum FlyoutPosition
    {
        Center = 0,
        Top = 1, 
        Right = 2, 
        Bottom = 4,
        Left = 8,
        
        TopRight = FlyoutPosition.Top | FlyoutPosition.Right,
        RightTop = FlyoutPosition.Right | FlyoutPosition.Top,
        
        BottomRight = FlyoutPosition.Bottom | FlyoutPosition.Right,
        RightBottom = FlyoutPosition.Right | FlyoutPosition.Bottom,
        
        TopLeft = FlyoutPosition.Top | FlyoutPosition.Left,
        LeftTop = FlyoutPosition.Left | FlyoutPosition.Top,
        
        BottomLeft = FlyoutPosition.Bottom | FlyoutPosition.Left,
        LeftBottom = FlyoutPosition.Left | FlyoutPosition.Bottom,
    }
}
