@using RTB.Blazor.UI.Extensions
@using RTB.Blazor.UI.Styles
@using static RTB.Blazor.UI.Components.FlyoutMenu

@inherits RTBComponent

@typeparam TOption

@inject IJSRuntime JSRuntime

@code {
    [Parameter, EditorRequired] public required IEnumerable<TOption> Options { get; set; }
    [Parameter] public TOption? SelectedOption { get; set; }
    [Parameter] public EventCallback<TOption?> SelectedOptionChanged { get; set; }
    [Parameter] public Func<TOption?, string> OptionLabel { get; set; } = item => item?.ToString() ?? string.Empty;

    [Parameter] public string? LabelText { get; set; }
    [Parameter] public TextStyle? LabelTextStyle { get; set; }
    [Parameter] public required RenderFragment<TOption?>? LabelContent { get; set; }
    [Parameter] public string? LabelClass { get; set; }

    private readonly string FlyoutId = $"flyout-{Guid.NewGuid().ToString("N").Substring(0, 8)}";
}

@if(LabelContent is not null || !string.IsNullOrEmpty(LabelText))
{
    <label for="@(Id ?? FlyoutId)" class="@LabelClass">
        @(LabelContent?.Invoke(SelectedOption) ?? (@<RTB.Blazor.UI.Components.Text Element="span" TextStyle="@LabelTextStyle">@LabelText</RTB.Blazor.UI.Components.Text>))
    </label>
}

<select class="@(CombineClass(Class))" multiple="@false" id="@(Id ?? FlyoutId)">
    @foreach (var item in Options)
    {
        <option value="@item" label="@OptionLabel.Invoke(item)" selected="@(item?.Equals(SelectedOption) ?? false)" />
    }
</select>

@code {

    private void HandleSelection(TOption item)
    {
        if (item is null) return;

        if (SelectedOptionChanged.HasDelegate)
            SelectedOptionChanged.InvokeAsync(item);
    }

    public async ValueTask Show()
    {
        await JSRuntime.InvokeVoidAsync("popoverHelper.show", FlyoutId);
    }

    public async ValueTask Close()
    {
        await JSRuntime.InvokeVoidAsync("popoverHelper.close", FlyoutId);
    }

    public async ValueTask Toggle()
    {
        await JSRuntime.InvokeVoidAsync("popoverHelper.toggle", FlyoutId);
    }

    public enum FlyoutPosition
    {
        Center = 0,
        Top = 1,
        Right = 2,
        Bottom = 4,
        Left = 8,

        TopRight = FlyoutPosition.Top | FlyoutPosition.Right,
        RightTop = FlyoutPosition.Right | FlyoutPosition.Top,

        BottomRight = FlyoutPosition.Bottom | FlyoutPosition.Right,
        RightBottom = FlyoutPosition.Right | FlyoutPosition.Bottom,

        TopLeft = FlyoutPosition.Top | FlyoutPosition.Left,
        LeftTop = FlyoutPosition.Left | FlyoutPosition.Top,

        BottomLeft = FlyoutPosition.Bottom | FlyoutPosition.Left,
        LeftBottom = FlyoutPosition.Left | FlyoutPosition.Bottom,
    }
}
