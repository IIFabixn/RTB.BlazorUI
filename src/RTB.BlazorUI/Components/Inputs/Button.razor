@using RTB.Blazor.Extensions
@using RTB.Blazor.Styles
@using RTB.Blazor.Components
@using static RTB.Blazor.Components.RTBText

@inherits RTBComponent

@inject IJSRuntime JSRuntime

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public TextAlign LabelAlign { get; set; }
    [Parameter] public string? LabelClass { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;

    [Parameter] public ButtonStyle? ButtonStyle { get; set; }

    [Parameter] public string? Tooltip { get; set; }

    [Parameter] public RTBColor? BackgroundColor { get; set; }
    [Parameter] public RTBColor? DisabledBackgroundColor { get; set; }
    [Parameter] public RTBColor? Color { get; set; }
    [Parameter] public RTBColor? DisabledColor { get; set; }

    [Parameter] public Spacing[]? Padding { get; set; }
    [Parameter] public Spacing[]? Margin { get; set; }

    [Parameter, EditorRequired] public EventCallback OnClick { get; set; }

    private void HandleClick() {
        if (Disabled) return;
        if (OnClick.HasDelegate) OnClick.InvokeAsync();
    }

    private RTBColor? GetColor() => Disabled ? DisabledColor ?? ButtonStyle?.DisabledColor : Color ?? ButtonStyle?.Color;
    private RTBColor? GetBackgroundColor() => Disabled ? DisabledBackgroundColor ?? ButtonStyle?.DisabledBackgroundColor : BackgroundColor ?? ButtonStyle?.BackgroundColor;
}

<Styled Context="ComponentClass">
    <PreStyled Style="@ButtonStyle" />
    <Other Property="cursor" Value="@(Disabled ? "default" : "pointer")" />
    <Color Value="@GetColor()" />
    <Background Color="@GetBackgroundColor()" />
    <Other Property="text-wrap" Value="nowrap" />

    @if (Padding is not null and { Length: > 0 })
    {
        @switch (Padding.Length)
        {
            case 1:
                <Padding All="@Padding[0]" Condition="@(Padding is { Length: 1 })" />
                break;
            case 2:
                <Padding Vertical="Padding[0]" Horizontal="@Padding[1]" Condition="@(Padding is { Length: 2 })" />
                break;
            case 3:
                <Padding Top="@Padding[0]" Horizontal="@Padding[1]" Bottom="@Padding[2]" Condition="@(Padding is { Length: 3 })" />
                break;
            case 4:
                <Padding Top="@Padding[0]" Right="@Padding[1]" Bottom="@Padding[2]" Left="@Padding[3]" Condition="@(Padding is { Length: 4 })" />
                break;
        }
    }

    @if (Margin is not null and { Length: > 0 })
    {
        @switch (Margin.Length)
        {
            case 1:
                <Margin All="@Margin[0]" Condition="@(Margin is { Length: 1 })" />
                break;
            case 2:
                <Margin Horizontal="Margin[0]" Vertical="@Margin[1]" Condition="@(Margin is { Length: 2 })" />
                break;
            case 3:
                <Margin Top="@Margin[0]" Horizontal="@Margin[1]" Bottom="@Margin[2]" Condition="@(Margin is { Length: 3 })" />
                break;
            case 4:
                <Margin Top="@Margin[0]" Right="@Margin[1]" Bottom="@Margin[2]" Left="@Margin[3]" Condition="@(Margin is { Length: 4 })" />
                break;
        }
    }

    <button 
        type="button"
        @onclick="HandleClick"
        class="@CombineClass(Class, ComponentClass)"
        title="@Tooltip"
        disabled="@Disabled"
        aria-disabled="@Disabled">
        @(ChildContent ?? (@<RTBText TextStyle="@ButtonStyle" Class="@LabelClass" Align="@LabelAlign">@Label</RTBText>))
    </button>
</Styled>
