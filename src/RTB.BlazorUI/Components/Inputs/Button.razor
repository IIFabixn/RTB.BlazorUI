@using RTB.Blazor.UI.Extensions
@using RTB.Blazor.UI.Styles

@inherits RTBComponent

@inject IJSRuntime JSRuntime

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? LabelClass { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;

    [Parameter] public ButtonStyle? ButtonStyle { get; set; }

    [Parameter] public string? Tooltip { get; set; }

    [Parameter] public RTBColor? Color { get; set; }
    [Parameter] public RTBColor? DisabledColor { get; set; }

    [Parameter, EditorRequired] public EventCallback OnClick { get; set; }

    private Task HandleClick() => Disabled || !OnClick.HasDelegate ? Task.CompletedTask : OnClick.InvokeAsync();

    private RTBColor? GetColor() => Disabled ? DisabledColor ?? ButtonStyle?.DisabledColor : Color ?? ButtonStyle?.Color;
}

<Styled Context="ComponentClass">
    <PreStyled Style="@ButtonStyle" />
    <Other Property="cursor" Value="@(Disabled ? "default" : "pointer")" />
    <Color Value="@GetColor()" />

    <button 
        type="button"
        @onclick="HandleClick"
        class="@CombineClass(ComponentClass, Class)"
        title="@Tooltip"
        disabled="@Disabled"
        aria-disabled="@Disabled">
        
        @if (ChildContent is not null) {
            @ChildContent
        }
        else
        {
            <RTB.Blazor.UI.Components.Text TextStyle="@ButtonStyle" Class="@LabelClass">@Label</RTB.Blazor.UI.Components.Text>
        }
    </button>
</Styled>
