@using RTB.Styled
@inherits RTBStyleBase

@code {
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;

    [Parameter, EditorRequired] public required string Query { get; set; }

    private readonly StyleBuilder _builder = StyleBuilder.Start;
    private string _lastStyle = string.Empty;

}

<CascadingValue Value="@_builder" IsFixed>
    @ChildContent
</CascadingValue>

@code {
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _builder.Clear();
    }

    protected override StyleBuilder BuildStyle(StyleBuilder builder)
    {
        if (!_builder.IsDirty) return builder; // No changes since last render
        if (string.IsNullOrEmpty(Query)) return builder; // No query to apply

        var style = _builder.Build();
        if (string.IsNullOrWhiteSpace(style)) return builder;
        if (style == _lastStyle) return builder; // No changes since last render

        _lastStyle = style;

        return builder.AppendSelector(Query, style);
    }
}
