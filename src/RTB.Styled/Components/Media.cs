using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using RTB.Blazor.Styled.Core;
using RTB.Blazor.Styled.Extensions;
using RTB.Blazor.Styled.Helper;

namespace RTB.Blazor.Styled.Components
{
    /// <summary>
    /// Contributes a <c>@media</c> group to the ambient <see cref="StyleBuilder"/> using a provided <see cref="BreakPoint"/>.
    /// </summary>
    /// <remarks>
    /// <para>
    /// This component establishes a private inner <see cref="StyleBuilder"/> that is exposed to its descendants
    /// via a <see cref="CascadingValue{TValue}"/>. Children that contribute styles will write into this inner builder.
    /// During composition, the accumulated child styles are emitted as a single <c>@media</c> block on the parent builder,
    /// using the media query generated by <see cref="BreakPoint.ToQuery"/>.
    /// </para>
    /// <para>
    /// The inner builder is cleared after each composition to avoid stale declarations across renders.
    /// The contribution is gated by <see cref="RTBStyleBase.Condition"/>.
    /// </para>
    /// <example>
    /// Example:
    /// <code>
    /// &lt;Media BreakPoint="new BreakPoint { Media = BreakPoint.MediaType.Screen, MinWidth = 992 }"&gt;
    ///     &lt;StyleSet Set="b =&gt; b.Set("display", "grid")" /&gt;
    /// &lt;/Media&gt;
    /// </code>
    /// This results in:
    /// <code>
    /// @media screen and (min-width: 992px) {
    ///   .scope { display: grid; }
    /// }
    /// </code>
    /// </example>
    /// </remarks>
    public class Media : RTBStyleBase
    {
        /// <summary>
        /// Child content that contributes styles to the media query via the inner <see cref="StyleBuilder"/>.
        /// </summary>
        [Parameter, EditorRequired] public required RenderFragment ChildContent { get; set; }

        /// <summary>
        /// Describes the media query to apply. Converted to a CSS query string via <see cref="BreakPoint.ToQuery"/>.
        /// </summary>
        [Parameter, EditorRequired] public required BreakPoint BreakPoint { get; set; }

        // Holds child contributions until composed into the parent as a single @media group.
        private readonly StyleBuilder _inner = StyleBuilder.Start;

        /// <summary>
        /// Composes child styles and appends them as a single <c>@media</c> group to the parent <paramref name="builder"/>.
        /// </summary>
        /// <param name="builder">The ambient parent style builder receiving the media group.</param>
        /// <remarks>
        /// <list type="bullet">
        ///   <item><description>Calls <see cref="StyleBuilder.Compose"/> to gather child contributions.</description></item>
        ///   <item><description>Wraps the accumulated fragments in a <c>@media</c> group using <see cref="BreakPoint.ToQuery"/>.</description></item>
        ///   <item><description>Clears the inner builder to prevent duplication across compositions.</description></item>
        /// </list>
        /// </remarks>
        protected override void BuildStyle(StyleBuilder builder)
        {
            _inner.Compose();
            builder.Media(BreakPoint.ToQuery(), b => b.Absorb(_inner));
            _inner.ClearAll();
        }

        /// <summary>
        /// Renders a fixed <see cref="CascadingValue{TValue}"/> that supplies the private <see cref="_inner"/> builder to descendants.
        /// </summary>
        /// <param name="renderBuilder">The Blazor <see cref="RenderTreeBuilder"/>.</param>
        /// <remarks>
        /// This component renders no visible DOM; it only provides a style scope to its children.
        /// </remarks>
        protected override void BuildRenderTree(RenderTreeBuilder renderBuilder)
        {
            // Provide the private StyleBuilder to descendants
            renderBuilder.OpenComponent<CascadingValue<StyleBuilder>>(0);
            renderBuilder.AddAttribute(1, "Value", _inner);
            renderBuilder.AddAttribute(2, "Name", nameof(StyleBuilder));
            renderBuilder.AddAttribute(3, "IsFixed", true);
            renderBuilder.AddAttribute(4, "ChildContent", ChildContent);
            renderBuilder.CloseComponent();
        }
    }
}
