@using RTB.Blazor.Styled
@using RTB.Blazor.Styled.Components
@using RTB.Blazor.Styled.Helper
@using RTB.Blazor.Styled.Services

@inject IStyleRegistry Registry

@implements IAsyncDisposable

@code {
    [Parameter] public RenderFragment<string?> ChildContent { get; set; } = default!;

    [Parameter] public string Classname { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ClassnameChanged { get; set; }
}

<CascadingValue Value="@_builder" Name="@nameof(RTBStyleBase.StyleBuilder)" IsFixed="true">
    @ChildContent(Classname)
</CascadingValue>

@code {
    private readonly StyleBuilder _builder = StyleBuilder.Start;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var style = _builder.Build();
        if (string.IsNullOrEmpty(style)) return;

        var cls = Registry.GetOrCreate(style); // deterministic class name (no injection yet)
        if (Classname == cls) return; // no change

        Classname = cls;

        await Registry.InjectInto(style, Classname);
        if (ClassnameChanged.HasDelegate)
        {
            await ClassnameChanged.InvokeAsync(Classname);
        }
        
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await Registry.TryRemove(Classname);
    }
}
