@using SkiaSharp
@using SkiaSharp.Views.Blazor

@inherits ChartBase

@code {
    [Parameter] public SKColor SKColor { get; set; } = SKColors.Blue;
}


<Styled Context="LineChartWrapperClass">
    <Grid TemplateRows="1fr auto" />

    <div class="@LineChartWrapperClass">

        <Styled Context="LineChartClass">
            <Size FullHeight FullWidth />

            <SKCanvasView class="@LineChartClass" OnPaintSurface="PaintLine" EnableRenderLoop />
        </Styled>

        <Styled Context="LabelsListClass">
            <Flex Direction="@Flex.AxisDirection.Row" AlignItems="@Flex.Align.Center" Gap="@Spacing.Rem(1)" Wrap="@Flex.WrapMode.Wrap" />

            <div class="@LabelsListClass">
                <Styled Context="LabelsItemsClass">
                    <Flex Direction="@Flex.AxisDirection.Row" AlignItems="@Flex.Align.Center" JustifyContent="@Flex.Justify.Center" Gap="@Spacing.Rem(1)" />

                    @foreach (var entry in Entries)
                    {
                        <div class="@LabelsItemsClass">
                            <Styled Context="LabelItemClass">
                                <Size Width="@SizeUnit.Rem(1)" Height="@SizeUnit.Rem(1)" />
                                <Border Radius="@SizeUnit.Rem(1)" />
                                <Flex Shrink="0" />

                                <div class="@LabelItemClass" style="background-color: #@(entry.Color?.ToString().Substring(3) ?? RTBColors.White);"></div>
                            </Styled>
                            <h4>@entry.Label</h4>
                        </div>
                    }
                </Styled>
            </div>
        </Styled>
    </div>
</Styled>

@code {

    private void PaintLine(SKPaintSurfaceEventArgs args)
    {
        var canvas = args.Surface.Canvas;
        canvas.Clear(SKColors.White);

        var info = args.Info;
        float left = 60, top = 30, right = 30, bottom = 55;
        float w = info.Width - left - right;
        float h = info.Height - top - bottom;

        using var axis = new SKPaint { Color = SKColors.LightGray, StrokeWidth = 1 };
        canvas.DrawLine(left, top, left, info.Height - bottom, axis);      // Y
        canvas.DrawLine(left, info.Height - bottom,
                        info.Width - right, info.Height - bottom, axis);   // X

        int yAxisSteps = 5; // Number of Y-axis labels
        float stepValue = MaxValue / yAxisSteps;

        using var labelPaint = new SKPaint
            {
                Color = SKColors.Black,
                IsAntialias = true,
            };

        for (int i = 0; i <= yAxisSteps; i++)
        {
            float y = info.Height - bottom - (i * h / yAxisSteps);
            float value = i * stepValue;

            // Draw Y-axis label
            canvas.DrawText(value.ToString("0"), left - 8, y + 5, SKTextAlign.Right, new() { Size = 12 }, labelPaint);
            // Optional: Draw grid lines
            using var gridPaint = new SKPaint
                {
                    Color = SKColors.LightGray,
                    StrokeWidth = 1,
                    PathEffect = SKPathEffect.CreateDash(new float[] { 4, 4 }, 0)
                };

            canvas.DrawLine(left, y, info.Width - right, y, gridPaint);
        }

        using var line = new SKPaint
            {
                Color = SKColor,
                StrokeWidth = 3,
                IsAntialias = true,
                Style = SKPaintStyle.Stroke
            };

        var path = new SKPath();
        for (int i = 0; i < Entries.Count; i++)
        {
            float x = left + i * w / (Entries.Count - 1);
            float y = Math.Max(top + line.StrokeWidth / 2, info.Height - bottom - (Entries[i].Value / MaxValue) * h);
            if (i == 0) path.MoveTo(x, y);
            else path.LineTo(x, y);
            canvas.DrawCircle(x,y,1f, line);

            // Only draw labels for every nth point
            if (i % 7 == 0 || i == Entries.Count - 1) // Adjust '5' as needed
            {
                canvas.DrawText(Entries[i].Label, x, info.Height - bottom + 15, SKTextAlign.Right, new() { Size = 14f }, labelPaint);
            }
        }
        canvas.DrawPath(path, line);
    }
}