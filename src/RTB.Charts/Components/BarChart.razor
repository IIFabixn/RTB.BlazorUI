@using SkiaSharp
@using SkiaSharp.Views.Blazor

@inherits ChartBase

<Styled Context="BarChartWrapperClass">
    <Grid TemplateRows="1fr auto" />

    <div class="@BarChartWrapperClass">

        <Styled Context="BarChartClass">
            <Size FullHeight FullWidth />

            <SKCanvasView class="@BarChartClass" OnPaintSurface="PaintBars" EnableRenderLoop />
        </Styled>

        <Styled Context="LabelsListClass">
            <Flex Direction="@Flex.AxisDirection.Row" AlignItems="@Flex.Align.Center" Gap="@Spacing.Rem(1)" Wrap="@Flex.WrapMode.Wrap" />
            
            <div class="@LabelsListClass">
                <Styled Context="LabelsItemsClass">
                    <Flex Direction="@Flex.AxisDirection.Row" AlignItems="@Flex.Align.Center" JustifyContent="@Flex.Justify.Center" Gap="@Spacing.Rem(1)" />
                    
                    @foreach (var entry in Entries)
                    {
                        <div class="@LabelsItemsClass">
                            <Styled Context="LabelItemClass">
                                <Size Width="@SizeUnit.Rem(1)" Height="@SizeUnit.Rem(1)" />
                                <Border Radius="@SizeUnit.Rem(1)" />
                                <Flex Shrink="0" />

                                <div class="@LabelItemClass" style="background-color: @(entry.Color.HexRgba);"></div>
                            </Styled>
                            <h4>@entry.Label</h4>
                        </div>
                    }
                </Styled>
            </div>
        </Styled>
    </div>
</Styled>

@code {
    private void PaintBars(SKPaintSurfaceEventArgs args)
    {
        var canvas = args.Surface.Canvas;
        canvas.Clear(SKColors.White);
        var info = args.Info;
        float margin = 40;
        float barW = (info.Width - 2 * margin) / (Entries.Count * 2f);

        using var paint = new SKPaint { IsAntialias = true };

        for (int i = 0; i < Entries.Count; i++)
        {
            float h = (Entries[i].Value / MaxValue) * (info.Height - 2 * margin);
            float x = margin + barW * (1 + 2 * i);
            float y = info.Height - margin - h;

            paint.Color = Entries[i].Color.ToSKColor();
            canvas.DrawRoundRect(x, y, barW, h, 6, 6, paint);
        }
    }

}