@using SkiaSharp
@using SkiaSharp.Views.Blazor

@inherits ChartBase

<Styled Context="DonutWrapperClass">
    <Grid TemplateRows="1fr auto" />

    <div class="@DonutWrapperClass">

        <Styled Context="DonutClass">
            <Size FullHeight FullWidth />

            <SKCanvasView class="@DonutClass" OnPaintSurface="@PaintDonut" EnableRenderLoop />
        </Styled>

        <Styled Context="LabelsListClass">
            <Flex Direction="@Flex.AxisDirection.Row" AlignItems="@Flex.Align.Center" Gap="@Spacing.Rem(1)" Wrap="@Flex.WrapMode.Wrap" />

            <div class="@LabelsListClass">
                <Styled Context="LabelsItemsClass">
                    <Flex Direction="@Flex.AxisDirection.Row" AlignItems="@Flex.Align.Center" JustifyContent="@Flex.Justify.Center" Gap="@Spacing.Rem(1)" />

                    @foreach (var entry in Entries)
                    {
                        <div class="@LabelsItemsClass">
                            <Styled Context="LabelItemClass">
                                <Size Width="@SizeUnit.Rem(1)" Height="@SizeUnit.Rem(1)" />
                                <Border Radius="@SizeUnit.Rem(1)" />
                                <Flex Shrink="0" />

                                <div class="@LabelItemClass" style="background-color: @(entry.Color.HexRgba);"></div>
                            </Styled>
                            <h4>@entry.Label (@entry.Value)</h4>
                        </div>
                    }
                </Styled>
            </div>
        </Styled>
    </div>
</Styled>

@code {
    private void PaintDonut(SKPaintSurfaceEventArgs args)
    {
        var canvas = args.Surface.Canvas;
        canvas.Clear(SKColors.White);

        var outerRadius = Math.Min(args.Info.Width, args.Info.Height) * 0.4f;
        var innerRadius = outerRadius * 0.6f; // Adjust this to control the thickness of the donut
        var center = new SKPoint(args.Info.Width / 2f, args.Info.Height / 2f);

        float start = -90f; // Start at 12-o’clock
        float gapAngle = 2f; // Gap angle in degrees
        using var paint = new SKPaint
            {
                IsAntialias = true,
                Style = SKPaintStyle.Fill,
                StrokeWidth = 0 // Ensure no stroke is applied
            };

        paint.Color = SKColors.LightGray;
        canvas.DrawCircle(center.X, center.Y, innerRadius - 4f, paint);

        foreach (var entry in Entries)
        {
            if (entry.Value <= 0) continue;

            float sweep = 360f * (entry.Value / TotalValue) - gapAngle; // Reduce sweep by gap angle
            paint.Color = entry.Color.ToSKColor();

            using var path = new SKPath();
            path.AddArc(new SKRect(center.X - outerRadius, center.Y - outerRadius, center.X + outerRadius, center.Y + outerRadius), start, sweep);
            path.ArcTo(new SKRect(center.X - innerRadius, center.Y - innerRadius, center.X + innerRadius, center.Y + innerRadius), start + sweep, -sweep, false);

            path.Close();
            canvas.DrawPath(path, paint);
            start += sweep + gapAngle; // Add gap angle to the start for the next segment
        }
    }
}