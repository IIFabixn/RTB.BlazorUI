<!-- DataGrid.razor ------------------------------------------------------>
@typeparam TRow
@attribute [CascadingTypeParameter(nameof(TRow))]

@inherits RTBComponent

@code {
    [Parameter] public IEnumerable<TRow> Items { get; set; } = Enumerable.Empty<TRow>();
    [Parameter] public EventCallback<TRow> DoubleClickCallback { get; set; }
    [Parameter] public EventCallback<TRow> OnDoubleTab { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;

}

<CascadingValue Value="this">
    @ChildContent
    <!-- registers the <DataColumn>s -->
</CascadingValue>

<div class="h-full overflow-auto">
    <div class="grid sticky top-0 z-10 bg-blue-100 border-b"
        style="grid-template-columns:@GridTemplate">

        <!-- ---------- Header cells (row 1) ------------------------ -->
        @foreach (var col in _columns)
        {
            <div class="p-2 font-medium bg-blue-100 sticky top-0
                select-none cursor-pointer z-10 border-b flex items-center justify-between"
            @onclick="() => ToggleSort(col)">
                @col.RenderHeader
                @if (_sort?.Column == col)
                {
                    <span>@(_sort.Descending ? "▼" : "▲")</span>
                }
            </div>
        }

        <!-- ---------- Data cells (rows 2…N) ----------------------- -->
        @for (var rowIdx = 0; rowIdx < _sortedItems.Count; rowIdx++)
        {
            var row = _sortedItems[rowIdx];
            for (var colIdx = 0; colIdx < _columns.Count; colIdx++)
            {
                var col = _columns[colIdx];
                <div role="cell" @key="@($"{rowIdx}_{colIdx}")"
                     class="p-2 @(rowIdx % 2 == 0 ? "bg-slate-50" : "bg-white")"
                     @ondblclick="() => DoubleClickCallback.InvokeAsync(row)">
                    @(builder => col.RenderCell(builder, row))
                </div>
            }
        }
    </div>
</div>

@code {
    private readonly List<IColumn<TRow>> _columns = [];
    private SortInfo? _sort;
    private List<TRow> _sortedItems = [];

    protected override void OnParametersSet()
    {
        if (_sort is null)
        {
            var firstSortable = _columns.FirstOrDefault(c => c.CanSort);
            if (firstSortable is not null)
                _sort = new(firstSortable, firstSortable.DefaultSortDescending);
        }

        _sortedItems = SortItems().ToList();
    }

    private IEnumerable<TRow> SortItems()
    {
        if (_sort is { Column.SortKey: not null } s)
        {
            return s.Descending
                ? Items.OrderByDescending(s.Column.SortKey!)
                : Items.OrderBy(s.Column.SortKey!);
        }

        return Items;
    }

    private string GridTemplate => string.Join(' ', _columns.Select(c => c.Width ?? "auto"));

    public void AddColumn(IColumn<TRow> column)
    {
        if (!_columns.Contains(column))
            _columns.Add(column);
    }

    public void RemoveColumn(IColumn<TRow> column) {
        if (_columns.Contains(column))
            _columns.Remove(column);
    }

    private void ToggleSort(IColumn<TRow> column)
    {
        if (!column.CanSort) return;

        _sort = _sort?.Column == column
            ? _sort with { Descending = !_sort.Descending }  // toggle direction
            : new(column, column.DefaultSortDescending);     // new column selected

        _sortedItems = SortItems().ToList();
    }

    private record SortInfo(IColumn<TRow> Column, bool Descending);
}