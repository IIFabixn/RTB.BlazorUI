@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Helper
@using RTB.BlazorUI.Interfaces

@inherits RTBComponent
@implements IRegister<TabItem>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter] public RenderFragment<List<TabItem>>? HeadContent { get; set; }
    [Parameter] public string ActiveTabClass { get; set; } = "activetab";

    private string? TabClass;
}

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

<Grid Rows="auto 1fr" @attributes="@CapturedAttributes">
    <GridItem @attributes="@CapturedAttributes.ByPrefix("HeadContent.")">
        @if (HeadContent is null)
        {
            <Grid @attributes="@CapturedAttributes.ByPrefix("HeadItemContent.")" Columns="@(string.Join(" ", _tabItems.Select(i => "1fr")))" class="place-items-center">
                <Styled @bind-Classname="TabClass">
                    width: 100%;
                    height: 24px;
                    cursor: pointer;
                    display: flex;
                    justify-content: center;
                    align-itrems: center;
                </Styled>
                @foreach (var tab in _tabItems)
                {
                    <GridItem @key="tab.Guid" class="@(ClassBuilder.Create(TabClass).AppendIf(ActiveTabClass, SelectedTab == tab.Title).Append(tab.CapturedAttributes.GetValueOrDefault<string>("class")))"
                              @onclick="() => SelectedTab = tab.Title"
                              @attributes="@tab.CapturedAttributes.Without("class")">
                        @if (tab.HeadContent is not null)
                        {
                            @tab.HeadContent
                        }
                        else
                        {
                            <h4>@tab.Title</h4>
                        }
                    </GridItem>
                }
            </Grid>
        }
        else 
        {
            @HeadContent
        }
    </GridItem>
    <GridItem @attributes="@CapturedAttributes.ByPrefix("SelectedTabContent.")">
        @SelectedTabContent
    </GridItem>
</Grid>

@code {
    private List<TabItem> _tabItems = new List<TabItem>();
    private string? _selectedTab;
    private string? SelectedTab
    {
        get => _selectedTab;
        set => SetProperty(ref _selectedTab, value);
    }

    private RenderFragment? SelectedTabContent => _tabItems.FirstOrDefault(i => i.Title == SelectedTab)?.ChildContent;

    public void Register(TabItem tabItem)
    {
        if (!_tabItems.Contains(tabItem))
        {
            SelectedTab ??= tabItem.Title;
            _tabItems.Add(tabItem);

            StateHasChanged();
        }
    }

    public void Unregister(TabItem tabItem)
    {
        if (_tabItems.Contains(tabItem))
        {
            _tabItems.Remove(tabItem);
            if (SelectedTab == tabItem.Title)
            {
                SelectedTab = null;
            }

            StateHasChanged();
        }
    }
}
