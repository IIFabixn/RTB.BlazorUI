@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Helper
@using RTB.BlazorUI.Interfaces
@using RTB.BlazorUI.Services.Style
@using RTB.BlazorUI.Styles

@inherits RTBComponent

@implements IRegister<TabItem>

@code {
    [Parameter] public RenderFragment<TabItem>? TabTemplate { get; set; }
    [Parameter] public RenderFragment Tabs { get; set; } = default!;

    [Parameter] public TabStyle? TabStyle { get; set; }
    [Parameter] public TabStyle? ActiveTabStyle { get; set; }

    [Parameter] public string? ContentClass { get; set; }

}

<CascadingValue Value="this">
    @Tabs
</CascadingValue>

<StyledComponent Context="TabClass">
    <Style>
        <Styled Style="@TabStyle" />
        <Other Property="cursor" Value="pointer" />
        <FlexDisplay Direction="row" JustifyContent="center" AlignItems="center" />
    </Style>

    <ChildContent>
        <Grid Rows="auto 1fr" Class="@ClassBuilder.Create("TabGroup", Class).Build()" @attributes="@CapturedAttributes?.Without("class", "style")">
            <GridItem>
                <Grid Columns="@(string.Join(" ", _tabItems.Select(i => "1fr")))" Class="place-items-center">
                    @foreach (var tab in _tabItems)
                    {
                        <GridItem 
                            FullWidth
                            @key="tab.Guid"
                            @onclick="() => SelectedTab = tab.Title"
                            Class="@ClassBuilder.Create("TabItem", TabClass).Build()">
                            @if (tab.TabContent is not null)
                            {
                                @tab.TabContent
                            }
                            else if (TabTemplate is not null)
                            {
                                @TabTemplate(tab)
                            }
                        </GridItem>
                    }
                </Grid>
            </GridItem>
            <GridItem Class="@ContentClass">
                @SelectedTabContent
            </GridItem>
        </Grid>
    </ChildContent>
</StyledComponent>

@code {
    private List<TabItem> _tabItems = new List<TabItem>();
    private string? _selectedTab;
    private string? SelectedTab
    {
        get => _selectedTab;
        set => SetProperty(ref _selectedTab, value);
    }

    private RenderFragment? SelectedTabContent => _tabItems.FirstOrDefault(i => i.Title == SelectedTab)?.ChildContent;

    public void Register(TabItem tabItem)
    {
        if (!_tabItems.Contains(tabItem))
        {
            SelectedTab ??= tabItem.Title;
            _tabItems.Add(tabItem);

            StateHasChanged();
        }
    }

    public void Unregister(TabItem tabItem)
    {
        if (_tabItems.Contains(tabItem))
        {
            _tabItems.Remove(tabItem);
            if (SelectedTab == tabItem.Title)
            {
                SelectedTab = null;
            }

            StateHasChanged();
        }
    }
}
