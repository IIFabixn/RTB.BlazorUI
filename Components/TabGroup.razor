@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Helper
@using RTB.BlazorUI.Interfaces
@using RTB.BlazorUI.Services.Theme.Styles

@inherits RTBComponent
@implements IRegister<TabItem>

@code {
    [Inject] protected IStyled Styled { get; set; } = default!;

    [Parameter] public RenderFragment<TabItem>? TabTemplate { get; set; }
    [Parameter] public RenderFragment Tabs { get; set; } = default!;

    [Parameter] public TabStyle? TabStyle { get; set; }
    [Parameter] public TabStyle? ActiveTabStyle { get; set; }

    private string? TabClass;

    protected override async Task OnParametersSetAsync()
    {
        ComponentClass = await Styled.CssAsync(RTBStyle.Build());
    }
}

<CascadingValue Value="this">
    @Tabs
</CascadingValue>

<Styled @bind-Classname="TabClass">
    height: 24px;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-itrems: center;
    @(TabStyle?.ToStyle())
</Styled>

<Grid Rows="auto 1fr" class="@ClassBuilder.Create("TabGroup", ComponentClass, Class).Build()" @attributes="@CapturedAttributes?.Without("class", "style")">
    <GridItem>
        <Grid Columns="@(string.Join(" ", _tabItems.Select(i => "1fr")))" class="place-items-center">
            @foreach (var tab in _tabItems)
            {
                <GridItem 
                    FullWidth
                    @key="tab.Guid"
                    @onclick="() => SelectedTab = tab.Title"
                    style="@(SelectedTab == tab.Title ? ActiveTabStyle : null)"
                    class="@ClassBuilder.Create("TabItem", TabClass).Build()">
                    @if (tab.TabContent is not null)
                    {
                        @tab.TabContent
                    }
                    else if (TabTemplate is not null)
                    {
                        @TabTemplate(tab)
                    }
                </GridItem>
            }
        </Grid>
    </GridItem>
    <GridItem>
        @SelectedTabContent
    </GridItem>
</Grid>

@code {
    private List<TabItem> _tabItems = new List<TabItem>();
    private string? _selectedTab;
    private string? SelectedTab
    {
        get => _selectedTab;
        set => SetProperty(ref _selectedTab, value);
    }

    private RenderFragment? SelectedTabContent => _tabItems.FirstOrDefault(i => i.Title == SelectedTab)?.ChildContent;

    public void Register(TabItem tabItem)
    {
        if (!_tabItems.Contains(tabItem))
        {
            SelectedTab ??= tabItem.Title;
            _tabItems.Add(tabItem);

            StateHasChanged();
        }
    }

    public void Unregister(TabItem tabItem)
    {
        if (_tabItems.Contains(tabItem))
        {
            _tabItems.Remove(tabItem);
            if (SelectedTab == tabItem.Title)
            {
                SelectedTab = null;
            }

            StateHasChanged();
        }
    }
}
