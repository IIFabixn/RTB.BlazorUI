@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Helper
@using static RTB.BlazorUI.Components.FlyoutMenu
@inherits RTBComponent

@typeparam TOption

@code {
    [Parameter] public List<TOption> Options { get; set; } = default!;

    [Parameter, EditorRequired] public RenderFragment<TOption?> ActionContent { get; set; } = default!;
    [Parameter, EditorRequired] public RenderFragment<TOption> OptionTemplate { get; set; } = default!;

    [Parameter] public TOption? SelectedOption { get; set; }
    [Parameter] public EventCallback<TOption?> SelectedOptionChanged { get; set; } = default!;

    /// <summary>
    /// Fragment for exameple Searchbars, Filter Options, etc..
    /// </summary>
    [Parameter] public RenderFragment? OptionsHeader { get; set; }
    [Parameter] public string? ActivatorClass { get; set; }
    [Parameter] public string? ContentClass { get; set; }

    [Parameter] public bool Multiple { get; set; }
    [Parameter] public int MaxAmountOfVisibleItems { get; set; } = 8;

    private FlyoutMenu? FlyoutMenuRef;
}

<FlyoutMenu
    @ref="FlyoutMenuRef"
    Position="FlyoutPosition.Down"
    ActivatorClass="@ActivatorClass"
    ContentClass="@ContentClass"
    Class="@(ClassBuilder.Create("Select").Append(Class).Build())"
    @attributes="@CapturedAttributes"
>
    <Activator>
        @ActionContent.Invoke(SelectedOption)
    </Activator>

    <FlyoutContent>
        <Stack Column>
            @if (OptionsHeader is not null)
            {
                @OptionsHeader
            }
            <Styled Context="SelectionList">
                <Size MaxHeight="35rem" MinHeight="0" FullWidth />
                <Overflow Value="auto" />

                <CollectionList Vertical Items="@Options" TItem="TOption" Class="@SelectionList">
                    <ItemTemplate Context="item">
                        <div @onclick="@(() => HandleSelect(item))">
                            @OptionTemplate.Invoke(item)
                        </div>
                    </ItemTemplate>
                </CollectionList>
            </Styled>
        </Stack>
    </FlyoutContent>
</FlyoutMenu>

@code {
    private void HandleSelect(TOption item)
    {
        SelectedOption = item; 
        SelectedOptionChanged.InvokeAsync(item); 
        if (!Multiple) FlyoutMenuRef?.CloseMenu();
    }
}
