@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Helper
@using static RTB.BlazorUI.Components.FlyoutMenu
@inherits RTBComponent

@typeparam TOption

@code {
    [Parameter] public List<TOption> Options { get; set; } = default!;

    [Parameter] public RenderFragment<TOption?>? ActionContent { get; set; }
    [Parameter] public RenderFragment<TOption>? OptionTemplate { get; set; }

    [Parameter] public TOption? SelectedOption { get; set; }
    [Parameter] public EventCallback<TOption?> SelectedOptionChanged { get; set; } = default!;

    /// <summary>
    /// Fragment for exameple Searchbars, Filter Options, etc..
    /// </summary>
    [Parameter] public RenderFragment? OptionsHeader { get; set; }
    [Parameter] public string? ActivatorClass { get; set; }
    [Parameter] public string? ContentClass { get; set; }

    [Parameter] public bool Multiple { get; set; }
    [Parameter] public int MaxAmountOfVisibleItems { get; set; } = 8;

    private FlyoutMenu? FlyoutMenuRef;
}

<Styled Context="ComponentClass">
    <Size MinWidth="0" MaxHeight="@($"calc({MaxAmountOfVisibleItems} * 100%)")" />

    <FlyoutMenu
        @ref="FlyoutMenuRef"
        Position="FlyoutPosition.Down"
        ActivatorClass="@ActivatorClass"
        ContentClass="@ClassBuilder.Create(ComponentClass).Append(ContentClass).Build()"
        Class="@(ClassBuilder.Create("Select").Append(Class).Build())"
        @attributes="@CapturedAttributes"
    >
        <Activator>
            @ActionContent?.Invoke(SelectedOption)
        </Activator>

        <ChildContent>
            <Stack Column>
                @if (OptionsHeader is not null)
                {
                    @OptionsHeader
                }
                <div style="min-height: 0; max-height: 100%; overflow: auto;">
                    <CollectionList Vertical FullWidth Items="@Options" TItem="TOption" Context="item">
                        <div @onclick="@(() => HandleSelect(item))">
                            @OptionTemplate?.Invoke(item)
                            @if (OptionTemplate is null)
                            {
                                <p>@item?.ToString()</p>
                            }
                        </div>
                    </CollectionList>
                </div>
            </Stack>
        </ChildContent>
    </FlyoutMenu>
</Styled>

@code {
    private void HandleSelect(TOption item)
    {
        SelectedOption = item; 
        SelectedOptionChanged.InvokeAsync(item); 
        if (!Multiple) FlyoutMenuRef?.CloseMenu();
    }
}
