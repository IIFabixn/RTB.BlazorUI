@typeparam TItem

@inherits RTBComponent

@using RTB.BlazorUI.Components
@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Helper

@code {
    [Parameter] public bool IsHorizontal { get; set; } = false;
    [Parameter] public bool IsVertical { get; set; } = false;
    [Parameter] public IEnumerable<TItem> Items { get; set; } = Enumerable.Empty<TItem>();
    [Parameter] public RenderFragment<TItem>? ItemTemplate {get; set; }
    [Parameter] public RenderFragment? HeaderTemplate { get; set; }
}

<Box Flex class="@(ClassBuilder.Create().AppendIf("flex-col", IsVertical).AppendIf("flex-row", IsHorizontal).Append(CapturedAttributes.GetValueOrDefault<string>("class")).Build())"
    @attributes="@(CapturedAttributes.Without("class"))">
    @if (Items.Any())
    {
        foreach (var item in Items)
        {
            @if (ItemTemplate != null)
            {
                @ItemTemplate(item)
            }
            else
            {
                @item?.ToString()
            }
        }
    }
</Box>