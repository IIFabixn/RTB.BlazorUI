@typeparam TItem

@inherits RTBComponent

@using Microsoft.AspNetCore.Components.Web.Virtualization
@using RTB.BlazorUI.Components
@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Helper

@code {
    [Inject] protected IStyled Styled { get; set; } = default!;

    [Parameter] public List<TItem> Items { get; set; } = [];
    [Parameter] public RenderFragment<TItem>? ChildContent {get; set; }
    [Parameter] public RenderFragment? HeaderTemplate { get; set; }

    [Parameter] public string Orientation { get; set; } = "vertical";
    [Parameter] public bool IsHorizontal { get; set; } = false;
    [Parameter] public bool IsVertical { get; set; } = false;
    [Parameter] public bool Scrollable { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        ComponentClass = await Styled.CssAsync(RTBStyle.AppendIf("min-height", "0", Scrollable).AppendIf("overflow", "auto", Scrollable).Build());
    }
}

<FlexLayout
    Row="@IsHorizontal"
    Column="@IsVertical"
    class="@ClassBuilder.Create("CollectionList", ComponentClass, Class).Build()"
    @attributes="@CapturedAttributes?.Without("class", "style")"
>
    @if (Items.Any())
    {
        <Virtualize Items="@Items" Context="item">
            @ChildContent?.Invoke(item)
        </Virtualize>
    }
</FlexLayout>