@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Services.Theme.Themes
@inherits RTBComponent

@code {
    [Parameter, EditorRequired] public RenderFragment Activator { get; set; } = default!;
    [Parameter, EditorRequired] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter, EditorRequired] public FlyoutPosition Position { get; set; }

    [Parameter] public string? ActivatorClass { get; set; }
    [Parameter] public string? ContentClass { get; set; }
}

<StyledComponent Context="ComponentClass">
    <Style>
        <Other Property="position" Value="relative" />
        @Style
    </Style>

    <ChildContent>
        <div class="FlyoutMenu @ComponentClass @Class" @onclick:stopPropagation @attributes="@CapturedAttributes">
            <div @onclick="ToggleMenu" class="@ActivatorClass">
                @Activator
            </div>
            @if (IsOpen)
            {
                <StyledComponent Context="MenuClass">
                    <Style>
                        <Width Min="100%" />
                        <Other Property="z-index" Value="50" />
                        <Other Property="display" Value="flex" />
                        <Other Property="position" Value="absolute" />
                        <Other Raw="@GetFlyoutPositionStyle()" />
                    </Style>

                    <ChildContent>
                        <div class="@MenuClass @ContentClass">
                            @ChildContent
                        </div>
                    </ChildContent>
                </StyledComponent>
            }
        </div>
    </ChildContent>
</StyledComponent>

@code {
    public enum FlyoutPosition
    {
        UpLeft, Up, UpRight,
        DownLeft, Down, DownRight,
        LeftUp, Left, LeftDown,
        RightUp, Right, RightDown,
        Center
    }

    private bool _isOpen;
    private bool IsOpen 
    {
        get => _isOpen;
        set
        {
            OnStateChanged?.Invoke();
            SetProperty(ref _isOpen, value);
        }
    }
    public event Action? OnStateChanged;

    private void ToggleMenu()
    {
        IsOpen = !IsOpen;
        StateHasChanged();
    }

    public void CloseMenu() => IsOpen = false;
    public void OpenMenu() => IsOpen = true;

    private string GetFlyoutPositionStyle() => Position switch
    {
        FlyoutPosition.Up => "right: 50%; bottom: 100%; transform: translateX(50%); flex-direction: column;",
        FlyoutPosition.Right => "left: 100%; top: 50%; transform: translateY(50%); flex-direction: row;",
		FlyoutPosition.Down => "right: 50%; top: 100%; transform: translateX(50%); flex-direction: column;",
        FlyoutPosition.Left => "right: 100%; top: 50%; transform: translateY(50%); flex-direction: row;",
		_ => throw new ArgumentOutOfRangeException(nameof(Position), Position, "Not yet implemented")
    };
}
