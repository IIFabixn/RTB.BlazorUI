@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Services.Theme.Themes
@inherits RTBComponent

@code {
    [Parameter, EditorRequired] public RenderFragment Activator { get; set; } = default!;
    [Parameter, EditorRequired] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter, EditorRequired] public FlyoutPosition Position { get; set; }
    [Parameter] public string ActivatorClass { get; set; } = string.Empty;
    [Parameter] public string ContentClass { get; set; } = string.Empty;

    private string? MenuClass;
}

<Styled @bind-Classname="ComponentClass">
    position: relative;
</Styled>

<Styled @bind-Classname="MenuClass">
    position: absolute;
    z-index: 50;
</Styled>

<div class="@ComponentClass @(CapturedAttributes.GetValueOrDefault<string>("class"))" @onclick:stopPropagation @attributes="@CapturedAttributes.Without("class")">
    <div @onclick="ToggleMenu" class="@ActivatorClass">
		@Activator
	</div>
	@if (IsOpen)
    {
        <div class="@MenuClass @ContentClass" style="@GetFlyoutPositionStyle()">
            @ChildContent
        </div>
    }
</div>

@code {
    public enum FlyoutPosition
    {
        UpLeft, Up, UpRight,
        DownLeft, Down, DownRight,
        LeftUp, Left, LeftDown,
        RightUp, Right, RightDown,
        Center
    }

    private bool _isOpen;
    private bool IsOpen 
    {
        get => _isOpen;
        set
        {
            OnStateChanged?.Invoke();
            SetProperty(ref _isOpen, value);
        }
    }
    public event Action? OnStateChanged;

    private void ToggleMenu()
    {
        IsOpen = !IsOpen;
        StateHasChanged();
    }

    public void CloseMenu() => IsOpen = false;
    public void OpenMenu() => IsOpen = true;

    private string GetFlyoutPositionStyle() => Position switch
    {
		FlyoutPosition.Down => "right: 50%; top: 100%; transform: translateX(50%);",
        FlyoutPosition.Up => "right: 50%; bottom: 100%; transform: translateX(50%);",
		FlyoutPosition.Left => "right: 100%; top: 50%; transform: translateY(50%);",
		FlyoutPosition.Right => "left: 100%; top: 50%; transform: translateY(50%);",
		_ => throw new ArgumentOutOfRangeException(nameof(Position), Position, "Not yet implemented")
    };
}
