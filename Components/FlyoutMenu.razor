@inherits RTBComponent

@code {
    [Parameter, EditorRequired] public RenderFragment Activator { get; set; } = default!;
    [Parameter, EditorRequired] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter, EditorRequired] public FlyoutPosition Position { get; set; }
}

<div class="relative" @onclick:stopPropagation>
	<div @onclick="ToggleMenu" @attributes="@CapturedAttributes">
		@Activator
	</div>
	@if (IsOpen)
    {
        <div class="absolute @GetFlyoutPositionClasses() z-50 bg-white border rounded-xl min-w-[80px] p-2">
            @ChildContent
        </div>
    }
</div>

@code {
    public enum FlyoutPosition
    {
        UpLeft, Up, UpRight,
        DownLeft, Down, DownRight,
        LeftUp, Left, LeftDown,
        RightUp, Right, RightDown,
        Center
    }

    private bool _isOpen;
    private bool IsOpen 
    {
        get => _isOpen;
        set
        {
            OnStateChanged?.Invoke();
            SetProperty(ref _isOpen, value);
        }
    }
    public event Action? OnStateChanged;

    private void ToggleMenu()
    {
        IsOpen = !IsOpen;
        StateHasChanged();
    }

    public void CloseMenu() => IsOpen = false;
    public void OpenMenu() => IsOpen = true;

    private string GetFlyoutPositionClasses() => Position switch
    {
		FlyoutPosition.Down => "right-1/2 mt-2 top-full translate-x-1/2",
		FlyoutPosition.Up => "right-1/2 bottom-full mb-2 translate-x-1/2",
		FlyoutPosition.Left => "right-full mr-2 top-1/2 translate-y-1/2",
		FlyoutPosition.Right => "left-full ml-2 top-1/2 translate-y-1/2",
		_ => throw new ArgumentOutOfRangeException(nameof(Position), Position, "Not yet implemented")
    };
}
