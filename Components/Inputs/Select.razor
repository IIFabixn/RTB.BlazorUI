@using RTB.BlazorUI.Extensions
@using static RTB.BlazorUI.Components.FlyoutMenu
@inherits RTBComponent

@typeparam TOption

@inject IJSRuntime JSRuntime

@code {
    [Parameter] public List<TOption> Options { get; set; } = default!;

    [Parameter, EditorRequired] public RenderFragment<TOption?> ActionContent { get; set; } = default!;
    [Parameter, EditorRequired] public RenderFragment<TOption> OptionTemplate { get; set; } = default!;

    [Parameter] public TOption? SelectedOption { get; set; }
    [Parameter] public EventCallback<TOption> SelectedOptionChanged { get; set; } = default!;

    /// <summary>
    /// Fragment for exameple Searchbars, Filter Options, etc..
    /// </summary>
    [Parameter] public string? ActivatorClass { get; set; }
    [Parameter] public string? ContentClass { get; set; }

    [Parameter] public FlyoutPosition Anchor { get; set; } = FlyoutPosition.BottomLeft;

    [Parameter] public bool Multiple { get; set; }

    private readonly string FlyoutId = $"flyout-{Guid.NewGuid().ToString("N").Substring(0, 8)}";
}
<div style="@($"display:contents;anchor-scope:--{FlyoutId};")">
    <button popovertarget="@FlyoutId" class="@Class" style="@($"anchor-name: --{FlyoutId};")">
        @ActionContent.Invoke(SelectedOption)
    </button>

    <Styled Context="MenuClass">
        <Other Property="position" Value="absolute" />
        <Other Property="position-visibility" Value="always" />
        <Other Property="top" Value="@($"anchor(--{FlyoutId} top)")" Condition="@Anchor.HasFlag(FlyoutPosition.Top)" />
        <Other Property="bottom" Value="@($"anchor(--{FlyoutId} bottom)")" Condition="@Anchor.HasFlag(FlyoutPosition.Bottom)" />
        <Other Property="left" Value="@($"anchor(--{FlyoutId} left)")" Condition="@Anchor.HasFlag(FlyoutPosition.Left)" />
        <Other Property="right" Value="@($"anchor(--{FlyoutId} right)")" Condition="@Anchor.HasFlag(FlyoutPosition.Right)" />

        <Overflow />
        <Other Property="max-height" Value="-webkit-fill-available" />
        <Other Property="min-height" Value="anchor-size(width)" />
        <Margin All="0" />
        <Other Property="inset" Value="auto" />

        <Selector Query="&:popover-open">
            <Flex Direction="@Flex.AxisDirection.Column" />
        </Selector>

        <div class="@MenuClass @ContentClass" popover id="@FlyoutId" style="position-anchor: --@(FlyoutId);">
            <Stack Vertical Grow="1">
                <CollectionList Vertical Items="@Options" TItem="TOption">
                    <ItemTemplate Context="item">
                        <button popovertarget="@FlyoutId" popovertargetaction="hide" @onclick="@(() => HandleSelection(item))">
                            @OptionTemplate.Invoke(item)
                        </button>
                    </ItemTemplate>
                </CollectionList>
            </Stack>
        </div>
    </Styled>
</div>

@code {
    private void HandleSelection(TOption item)
    {
        if(item is not null && !item.Equals(SelectedOption))
        {
            Console.WriteLine($"Item changed {item}");
            SelectedOption = item; 
            if (SelectedOptionChanged.HasDelegate)
                SelectedOptionChanged.InvokeAsync(item);
        }
    }

    public enum FlyoutPosition
    {
        Center = 0,
        Top = 1, 
        Right = 2, 
        Bottom = 4,
        Left = 8,
        
        TopRight = FlyoutPosition.Top | FlyoutPosition.Right,
        RightTop = FlyoutPosition.Right | FlyoutPosition.Top,
        
        BottomRight = FlyoutPosition.Bottom | FlyoutPosition.Right,
        RightBottom = FlyoutPosition.Right | FlyoutPosition.Bottom,
        
        TopLeft = FlyoutPosition.Top | FlyoutPosition.Left,
        LeftTop = FlyoutPosition.Left | FlyoutPosition.Top,
        
        BottomLeft = FlyoutPosition.Bottom | FlyoutPosition.Left,
        LeftBottom = FlyoutPosition.Left | FlyoutPosition.Bottom,
    }
}
