@using Microsoft.AspNetCore.Components
@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Helper
@using RTB.BlazorUI.Interfaces
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using static RTB.BlazorUI.Helper.CssHelper

@typeparam TRow where TRow : class

@attribute [CascadingTypeParameter(nameof(TRow))]

@inherits RTBComponent

@implements IRegister<ColumnBase<TRow>>

@code {
    [Parameter] public IEnumerable<TRow> Items { get; set; } = [];
    [Parameter] public RenderFragment Columns { get; set; } = default!;

    [Parameter] public TRow? SelectedRow { get; set; }
    [Parameter] public EventCallback<TRow> SelectedRowChanged { get; set; }

    [Parameter] public string? HeaderClass { get; set; }
    [Parameter] public string? RowClass { get; set; }

    [Parameter, EditorRequired] public string KeyProperty { get; set; } = default!;
}

<!-- registers the <DataColumn>s -->
<CascadingValue Value="this">
    @Columns
</CascadingValue>

<OverflowBox Class="@Class">
    <Size FullWidth FullHeight />

    <Styled Context="ComponentClass">
        <GridDisplay TemplateColumns="@(GridTemplate())" TemplateRows="1fr" />
        <Other Property="position" Value="relative" />

        <div class="DataGrid @ComponentClass">
            @* ---------- Header cells (row 1) ------------------------ *@
            @for (var colIdx = 1; colIdx <= _columns.Count; colIdx++)
            {
                var col = _columns[colIdx - 1];
                <Stack 
                    Row
                    AlignItem="@AlignItems.Center"
                    JustifyContent="@JustifyContent.SpaceBetween"
                    Class="@(ClassBuilder.Create().Append(HeaderClass).Build())"
                >
                    <Other Property="position" Value="sticky" />
                    <Positioned Top="0" />
                    @(builder => col.RenderHeader(builder, colIdx))
                    @if (Sort?.Column == col)
                    {
                        <button @onclick="() => ToggleSort(col)" class="cursor-pointer">@(Sort.Descending ? "▼" : "▲")</button>
                    }
                </Stack>
            }

            <Virtualize Items="_sortedItems" Context="row">
                <!-- ---------- Data cells (rows 2…N) ----------------------- -->
                @{
                    int rowIndex = _sortedItems.IndexOf(row);
                }
                @* display:contents will not create a new element in the dom *@
                <div style="display:contents" class="@ClassBuilder.Create(RowClass).AppendIf("active", row == SelectedRow).Build()" @onclick="() => SelectRow(row)">
                    @for (var colIdx = 1; colIdx <= _columns.Count; colIdx++)
                    {
                        var col = _columns[colIdx - 1];
                        @(builder => col.RenderCell(builder, row, colIdx))
                    }
                </div>
            </Virtualize>
        </div>
    </Styled>
</OverflowBox>

@code {
    private List<ColumnBase<TRow>> _columns = [];
    private SortInfo? _sort;
    private SortInfo? Sort
    {
        get => _sort;
        set => SetProperty(ref _sort, value);
    }

    private List<TRow> _sortedItems = [];
    private TRow? _selectedRow;

    protected override void OnParametersSet()
    {
        if (Sort is null)
        {
            var firstSortable = _columns.FirstOrDefault(c => c.CanSort);
            if (firstSortable is not null)
                Sort = new(firstSortable, firstSortable.DefaultSortDescending);
        }

        _selectedRow = SelectedRow;
        SetProperty(ref _sortedItems, SortItems());
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        if (_columns.Count == 0) return; // no columns registered

        Sort ??= _columns.TryGetItem(i => i.CanSort, out var col) ? new(col, col.DefaultSortDescending) : null;

        SetProperty(ref _sortedItems, SortItems());
        StateHasChanged(); // trigger rerender
    }

    private List<TRow> SortItems()
    {
        if (Sort is { Column.SortKey: not null } s)
        {
            return (s.Descending
                ? Items.OrderByDescending(s.Column.SortKey!)
                : Items.OrderBy(s.Column.SortKey!)).ToList();
        }

        return Items.ToList();
    }

    private string GridTemplate()
    {
        return string.Join(' ', _columns.Select(c =>
        {
            if (c.MinWidth != null || c.MaxWidth != null)
            {
                var min = c.MinWidth ?? c.Width ?? "max-content";
                var max = c.MaxWidth ?? "1fr";
                return $"minmax({min}, {max})";
            }

            return c.Width ?? "max-content";
        }));
    }

    public void Register(ColumnBase<TRow> column)
    {
        if (_columns.Any(i => i.Guid == column.Guid)) return;
        Console.WriteLine($"register {column.Name}");
        _columns.Add(column);
        StateHasChanged();
    }

    public void Unregister(ColumnBase<TRow> column)
    {
        if (!_columns.Any(i => i.Guid == column.Guid)) return;
        
        _columns.Remove(column);
        StateHasChanged();
    }

    private void ToggleSort(IColumn<TRow> column)
    {
        if (!column.CanSort) return;

        Sort = Sort?.Column == column
            ? Sort with { Descending = !Sort.Descending }  // toggle direction
            : new(column, column.DefaultSortDescending);     // new column selected

        SetProperty(ref _sortedItems, SortItems());
    }

    private record SortInfo(IColumn<TRow> Column, bool Descending);

    private void SelectRow(TRow row)
    {
        SetProperty(ref _selectedRow, row);
        
        if (SelectedRowChanged.HasDelegate)
            SelectedRowChanged.InvokeAsync(_selectedRow);
    }
}