@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Helper
@using static RTB.BlazorUI.Helper.CssHelper

@inherits RTBComponent

@code {
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;

    [Parameter] public bool IsHorizontal { get; set; } = false;
    [Parameter] public bool IsVertical { get; set; } = false;
    [Parameter] public bool FullHeight { get; set; } = false;
    [Parameter] public bool FullWidth { get; set; } = false;

    [Parameter] public float Gap { get; set; }
    [Parameter] public string BackgroundColor { get; set; } = "inherit";

    [Parameter] public string Direction { get; set; } = FlexDirection.Row;
    [Parameter] public string AlignItem { get; set; } = AlignItems.Stretch;
    [Parameter] public string JustifyContent { get; set; } = CssHelper.JustifyContent.Center;
}

<Styled @bind-Classname="ComponentClass">
    @(StyleBuilder.Create()
        .Append("display", "flex")
        .AppendIf("height", "100%", FullHeight)
        .AppendIf("width", "100%", FullWidth)
        .Build())
    flex-direction: @(IsVertical ? "column" : IsHorizontal ? "row" : Direction);
    align-items: @AlignItem;
    justify-content: @JustifyContent;
    gap: @(Gap)rem;
    background-color: @BackgroundColor;
</Styled>

<div class="@ComponentClass @(CapturedAttributes.GetValueOrDefault<string>("class"))" @attributes="@CapturedAttributes.Without("class")">
    @ChildContent
</div>

@code {
    private string GetDirection()
    {
        return IsHorizontal ? "row" :
               IsVertical ? "column" :
               IsHorizontal && IsVertical ? "row" :
               "row";
    }
}