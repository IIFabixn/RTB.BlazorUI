@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Helper
@using static RTB.BlazorUI.Helper.CssHelper

@inherits RTBComponent

@code {
    [Inject] protected IStyled Styled { get; set; } = default!;

    [Parameter] public RenderFragment ChildContent { get; set; } = default!;

    [Parameter] public bool Row { get; set; } = false;
    [Parameter] public bool Column { get; set; } = false;
    [Parameter] public bool Reverse { get; set; } = false;

    [Parameter] public string? Gap { get; set; }

    [Parameter] public string? AlignItem { get; set; }
    [Parameter] public string? JustifyContent { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        ComponentClass = await Styled.CssAsync(
            RTBStyle
                .Append("display", "flex")
                .AppendIfNotEmpty("flex-direction", GetDirection())
                .AppendIfNotEmpty("align-items", AlignItem)
                .AppendIfNotEmpty("justify-content", JustifyContent)
                .AppendIfNotEmpty("gap", Gap)
                .Build()
        );
    }
}

<div class="@ClassBuilder.Create("FlexLayout", ComponentClass, Class).Build()" @attributes="@CapturedAttributes?.Without("class", "style")">
    @ChildContent
</div>

@code {
    private string? GetDirection()
    {
        return (Row, Column, Reverse) switch
        {
            (true, false, false) => "row",
            (false, true, false) => "column",
            (true, false, true) => "row-reverse",
            (false, true, true) => "column-reverse",
            _ => null
        };
    }
}