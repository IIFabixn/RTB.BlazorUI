@using RTB.BlazorUI.Extensions
@using static RTB.BlazorUI.Components.Text

@inherits RTBComponent

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public ButtonStyle Style { get; set; } = new();
    [Parameter] public string? Padding { get; set; }
    [Parameter] public string? Color { get; set; }
    [Parameter] public string? DisabledColor { get; set; }
}

<Styled @bind-Classname="ComponentClass">
    cursour: pointer;
    padding: @(Padding ?? Style.Padding);
    color: @(Color ?? Style.Color);
</Styled>

<Styled @bind-Classname="ComponentClass" PseudoClass="PseudoClasses.Disabled">
    cursour: default;
    color: @(DisabledColor ?? Style.DisabledColor);
</Styled>

<button class="@ComponentClass @(CapturedAttributes.GetValueOrDefault("class"))"
    @attributes="@(CapturedAttributes.Without("class"))">
    @if (ChildContent is not null) @ChildContent
    else
    {
        <RTB.BlazorUI.Components.Text Style="@Style" Color="inherit" @attributes="@(CapturedAttributes.ByPrefix("Label."))">@Label</RTB.BlazorUI.Components.Text>
    }
</button>

@code {
    public class ButtonStyle : TextStyle
    {
        public string Padding { get; set; } = "0";
        public string DisabledColor { get; set; } = "gray";
    }
}
