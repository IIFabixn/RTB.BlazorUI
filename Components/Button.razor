@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Helper
@using RTB.BlazorUI.Services.Theme
@using RTB.BlazorUI.Styles
@using static RTB.BlazorUI.Components.Text

@inherits RTBComponent

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? LabelClass { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public ButtonStyle? ButtonStyle { get; set; }

    [Parameter] public string? Color { get; set; }
}

<StyledComponent Context="ComponentClass">
    <Style>
        <Other Property="cursor" Value="cursor" Condition="@(!Disabled)" />
        <Other Property="cursor" Value="default" Condition="@(Disabled)" />
        <Styled Style="@ButtonStyle" />
        <Color Value="@(Color ?? ButtonStyle?.Color)" />
        @Style
    </Style>
    
    <ChildContent>
        <button type="button" class="@ClassBuilder.Create(ComponentClass, Class).Build()"
            disabled="@Disabled"
            @attributes="@(CapturedAttributes?.Without("class", "disabled"))">
            @if (ChildContent is not null) 
            {
                @ChildContent
            }
            else
            {
                <RTB.BlazorUI.Components.Text TextStyle="@ButtonStyle" class="@LabelClass">@Label</RTB.BlazorUI.Components.Text>
            }
        </button>
    </ChildContent>
</StyledComponent>
