@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Helper
@using RTB.BlazorUI.Services.Theme
@using RTB.BlazorUI.Services.Theme.Styles
@using static RTB.BlazorUI.Components.Text

@inherits RTBComponent

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Label { get; set; }

    [Parameter] public ButtonStyle? ButtonStyle { get; set; }
    
    [Parameter] public string? DisabledColor { get; set; }
}

<Styled @bind-Classname="ComponentClass">
    @(RTBStyle.Build())
    cursor: pointer;
    color: @(Color?.Hex ?? ButtonStyle?.Color);
</Styled>

<Styled @bind-Classname="ComponentClass" Pseudoclass="PseudoClasses.Disabled">
    @(RTBStyle.Build())
    cursor: default;
    color: @(DisabledColor ?? ButtonStyle?.DisabledColor);
</Styled>

<button class="@ClassBuilder.Create(ComponentClass, Class).Build()"
    @attributes="@(CapturedAttributes?.Without("class", "style"))">
    @if (ChildContent is not null) 
    {
        @ChildContent
    }
    else
    {
        <RTB.BlazorUI.Components.Text TextStyle="@ButtonStyle" @attributes="@(CapturedAttributes?.ByPrefix("Label."))">@Label</RTB.BlazorUI.Components.Text>
    }
</button>
