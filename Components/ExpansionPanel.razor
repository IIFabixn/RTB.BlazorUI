@using RTB.BlazorUI.Extensions
@inherits RTBComponent

@code {
    [Parameter]
    public RenderFragment? Header { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool InitialExpanded { get; set; } = false;

    [Parameter]
    public EventCallback<bool>? ExpandedChanged { get; set; }
}

<FlexLayout IsVertical @attributes="@CapturedAttributes.Without("Header.", "Content.")">
    <FlexLayout IsHorizontal class="gap-2 @(CapturedAttributes.GetValueOrDefault<string>("Header.class"))" @attributes="@CapturedAttributes.ByPrefix("Header.").Without("class")">
        @Header
        <button @onclick="Toggle">
            @if (isExpanded)
            {
                <span>Collapse</span>
            }
            else
            {
                <span>Expand</span>
            }
        </button>
    </FlexLayout>
    <div class="@(isExpanded ? "visible" : "collapse") @(CapturedAttributes.GetValueOrDefault<string>("Content.class"))" @attributes="@CapturedAttributes.ByPrefix("Content.").Without("class")">
        @ChildContent
    </div>
</FlexLayout>

@code{
    private bool isExpanded = false;

    private void Toggle()
    {
        SetProperty(ref isExpanded, !isExpanded);
        ExpandedChanged?.InvokeAsync(isExpanded);
    }
}
