@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Helper
@using RTB.BlazorUI.Services.Style
@inherits RTBComponent

@code {
    [Parameter, EditorRequired] public RenderFragment Activator { get; set; } = default!;
    [Parameter, EditorRequired] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter] public bool InitiallyExpanded { get; set; } = false;
}

<FlexLayout 
    Column
    Class="@ClassBuilder.Create("Expandable", Class).Build()"
    @attributes="@(CapturedAttributes)" 
    @onclick:stopPropagation
>
    <StyledComponent Context="ActivatorClass">
        <Style>
            <Width Value="100%" />
            @Style
        </Style>

        <ChildContent>
            <div class="@ClassBuilder.Create("Activator", ActivatorClass).Build()" 
                @onclick="ToggleMenu"
            >
                @Activator
            </div>
        </ChildContent>
    </StyledComponent>
    @if (IsOpen)
    {
        @ChildContent
    }
</FlexLayout>

@code {
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            IsOpen = InitiallyExpanded;
        }
    }

    private bool _isOpen;
    private bool IsOpen
    {
        get => _isOpen;
        set
        {
            SetProperty(ref _isOpen, value);
            OnStateChanged?.Invoke();
        }
    }
    public event Action? OnStateChanged;

    private void ToggleMenu()
    {
        IsOpen = !IsOpen;
        StateHasChanged();
    }

    public void CloseMenu() => IsOpen = false;
    public void OpenMenu() => IsOpen = true;
}
