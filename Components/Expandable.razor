@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Helper
@inherits RTBComponent

@code {
    [Inject] protected IStyled Styled { get; set; } = default!;

    [Parameter, EditorRequired] public RenderFragment Activator { get; set; } = default!;
    [Parameter, EditorRequired] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter] public bool InitiallyExpanded { get; set; } = false;

    private string? ActivatorClass;

    protected override async Task OnParametersSetAsync()
    {
        ComponentClass = await Styled.CssAsync(RTBStyle.Build());
        ActivatorClass = await Styled.CssAsync(StyleBuilder.Create().Append("width", "100%").Build());
    }
}

<FlexLayout 
    Column
    class="@ClassBuilder.Create("Expandable", ComponentClass, Class).Build()"
    @attributes="@(CapturedAttributes?.Without("class", "style", "."))" 
    @onclick:stopPropagation
>
    <div class="@ClassBuilder.Create("Activator", ActivatorClass, CapturedAttributes?.ByPrefix("Activator.").GetValueOrDefault<string>("class")).Build()" 
        @onclick="ToggleMenu" 
        @attributes="@CapturedAttributes?.ByPrefix("Activator.").Without("class")"
    >
        @Activator
    </div>
    @if (IsOpen)
    {
        @ChildContent
    }
</FlexLayout>

@code {
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            IsOpen = InitiallyExpanded;
        }
    }

    private bool _isOpen;
    private bool IsOpen
    {
        get => _isOpen;
        set
        {
            OnStateChanged?.Invoke();
            SetProperty(ref _isOpen, value);
        }
    }
    public event Action? OnStateChanged;

    private void ToggleMenu()
    {
        IsOpen = !IsOpen;
        StateHasChanged();
    }

    public void CloseMenu() => IsOpen = false;
    public void OpenMenu() => IsOpen = true;
}
