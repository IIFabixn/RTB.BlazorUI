@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Helper
@using RTB.BlazorUI.Interfaces

@inherits RTBComponent
@implements IRegister<GridItem>

@code {
    [Parameter]
    public string Columns { get; set; } = "1fr";

    [Parameter]
    public string Rows { get; set; } = "1fr";

    [Parameter] public bool FullHeight { get; set; } = false;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;
}

@* 
    Just to provide this Grid as CascardingParameter to the Content (mostly GridItems). 
    Why as Cascarding I head you asking.. so that we dont need to manually pass the Grid to each GridItem our self lol.
*@
<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

<div class="@(ClassBuilder.Create("grid").AppendIf("h-full", FullHeight).AppendIf((string?)CapturedAttributes.GetValueOrDefault("class") ?? string.Empty, () => CapturedAttributes.ContainsKey("class")).Build())"
    style="grid-template-columns: @Columns; grid-template-rows: @Rows;"
     @attributes="@(CapturedAttributes.Without("class"))"
>
    @foreach (var item in _gridItems)
    {
        <div @key="item.Guid"
        style="@(StyleBuilder.Create()
                .AppendIf("grid-column", item.Column.ToString(), item.Column > 0)
                .AppendIf("grid-column-start", $"span {item.ColumnSpan}", item.ColumnSpan > 1)
                .AppendIf("grid-row", item.Row.ToString(), item.Row > 0)
                .AppendIf("grid-row-start", $"span {item.RowSpan}", item.RowSpan > 1)
                .Build())"
        @attributes="@(item.CapturedAttributes)">
            @item.ChildContent
        </div>
    }
</div>

@code {
    private List<GridItem> _gridItems = [];

    public void Register(GridItem item)
    {
        if (_gridItems.Any(i => i.Guid == item.Guid)) return;

        _gridItems.Add(item);
        StateHasChanged();
    }

    public void Unregister(GridItem item)
    {
        if (!_gridItems.Any(i => i.Guid == item.Guid)) return;

        _gridItems.Remove(item);
        StateHasChanged(); // Trigger re-render when items are removed
    }
}