### YamlMime:ManagedReference
items:
- uid: RTB.Blazor.Styled.Helper.SelectorExpression
  commentId: T:RTB.Blazor.Styled.Helper.SelectorExpression
  id: SelectorExpression
  parent: RTB.Blazor.Styled.Helper
  children:
  - RTB.Blazor.Styled.Helper.SelectorExpression.Attribute(System.String,System.String,System.String)
  - RTB.Blazor.Styled.Helper.SelectorExpression.Class(System.String)
  - RTB.Blazor.Styled.Helper.SelectorExpression.Element(System.String)
  - RTB.Blazor.Styled.Helper.SelectorExpression.Id(System.String)
  - RTB.Blazor.Styled.Helper.SelectorExpression.PseudoClass(System.String)
  - RTB.Blazor.Styled.Helper.SelectorExpression.PseudoElement(System.String)
  - RTB.Blazor.Styled.Helper.SelectorExpression.Render
  - RTB.Blazor.Styled.Helper.SelectorExpression.ToString
  - RTB.Blazor.Styled.Helper.SelectorExpression.op_Addition(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  - RTB.Blazor.Styled.Helper.SelectorExpression.op_BitwiseAnd(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  - RTB.Blazor.Styled.Helper.SelectorExpression.op_BitwiseOr(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  - RTB.Blazor.Styled.Helper.SelectorExpression.op_Division(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  - RTB.Blazor.Styled.Helper.SelectorExpression.op_GreaterThan(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  - RTB.Blazor.Styled.Helper.SelectorExpression.op_Implicit(RTB.Blazor.Styled.Helper.SelectorExpression)~System.String
  - RTB.Blazor.Styled.Helper.SelectorExpression.op_Implicit(System.String)~RTB.Blazor.Styled.Helper.SelectorExpression
  - RTB.Blazor.Styled.Helper.SelectorExpression.op_LessThan(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  langs:
  - csharp
  - vb
  name: SelectorExpression
  nameWithType: SelectorExpression
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression
  type: Class
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: SelectorExpression
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 22
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: >-
    Base type for a small, composable CSS selector DSL.

    Use provided factory helpers, static members, and operator overloads to build complex selectors

    in a type-safe way and render them to CSS with <xref href="RTB.Blazor.Styled.Helper.SelectorExpression.ToString" data-throw-if-not-resolved="false"></xref>.
  example:
  - >-
    var s =
        SelectorExpression.Element("ul")
        / SelectorExpression.Element("li")
        + SelectorExpression.PseudoClass("hover")
        > SelectorExpression.Element("a") &amp; SelectorExpression.Class("primary");
    // Renders: "ul li+ :hover &gt; a~.primary"

    var css = s.ToString();
  syntax:
    content: 'public abstract record SelectorExpression : IEquatable<SelectorExpression>'
    content.vb: Public MustInherit Class SelectorExpression Implements IEquatable(Of SelectorExpression)
  inheritance:
  - System.Object
  derivedClasses:
  - RTB.Blazor.Styled.Helper.AttributeSelector
  - RTB.Blazor.Styled.Helper.BinarySelector
  - RTB.Blazor.Styled.Helper.ClassSelector
  - RTB.Blazor.Styled.Helper.ElementSelector
  - RTB.Blazor.Styled.Helper.FunctionalPseudoClass
  - RTB.Blazor.Styled.Helper.GroupedSelector
  - RTB.Blazor.Styled.Helper.IdSelector
  - RTB.Blazor.Styled.Helper.ParentSelector
  - RTB.Blazor.Styled.Helper.PseudoClass
  - RTB.Blazor.Styled.Helper.PseudoElement
  - RTB.Blazor.Styled.Helper.RawSelector
  implements:
  - System.IEquatable{RTB.Blazor.Styled.Helper.SelectorExpression}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.Element(System.String)
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.Element(System.String)
  id: Element(System.String)
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: Element(string)
  nameWithType: SelectorExpression.Element(string)
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.Element(string)
  type: Method
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: Element
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 30
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: Creates a selector expression for an HTML element by its name.
  example: []
  syntax:
    content: public static SelectorExpression Element(string name)
    parameters:
    - id: name
      type: System.String
      description: HTML tag name (e.g., "div", "button").
    return:
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    content.vb: Public Shared Function Element(name As String) As SelectorExpression
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.Element*
  nameWithType.vb: SelectorExpression.Element(String)
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.Element(String)
  name.vb: Element(String)
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.Id(System.String)
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.Id(System.String)
  id: Id(System.String)
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: Id(string)
  nameWithType: SelectorExpression.Id(string)
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.Id(string)
  type: Method
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: Id
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 36
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: Creates a selector expression for an element with a specific ID.
  example: []
  syntax:
    content: public static SelectorExpression Id(string id)
    parameters:
    - id: id
      type: System.String
      description: ID without the leading '#'.
    return:
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    content.vb: Public Shared Function Id(id As String) As SelectorExpression
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.Id*
  nameWithType.vb: SelectorExpression.Id(String)
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.Id(String)
  name.vb: Id(String)
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.Class(System.String)
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.Class(System.String)
  id: Class(System.String)
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: Class(string)
  nameWithType: SelectorExpression.Class(string)
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.Class(string)
  type: Method
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: Class
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 42
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: Creates a selector expression for an element with a specific class name.
  example: []
  syntax:
    content: public static SelectorExpression Class(string cls)
    parameters:
    - id: cls
      type: System.String
      description: Class name without the leading '.'.
    return:
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    content.vb: Public Shared Function [Class](cls As String) As SelectorExpression
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.Class*
  nameWithType.vb: SelectorExpression.Class(String)
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.Class(String)
  name.vb: Class(String)
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.Attribute(System.String,System.String,System.String)
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.Attribute(System.String,System.String,System.String)
  id: Attribute(System.String,System.String,System.String)
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: Attribute(string, string?, string?)
  nameWithType: SelectorExpression.Attribute(string, string?, string?)
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.Attribute(string, string?, string?)
  type: Method
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: Attribute
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 52
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: Creates a selector expression for an attribute of an element.
  example: []
  syntax:
    content: public static SelectorExpression Attribute(string name, string? value = null, string? op = null)
    parameters:
    - id: name
      type: System.String
      description: Attribute name.
    - id: value
      type: System.String
      description: Optional attribute value. If omitted, renders as [name].
    - id: op
      type: System.String
      description: Optional operator (e.g., "=", "~=", "^=", "$=", "*=", "|="). Defaults to "=" when <code class="paramref">value</code> is provided.
    return:
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    content.vb: Public Shared Function Attribute(name As String, value As String = Nothing, op As String = Nothing) As SelectorExpression
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.Attribute*
  nameWithType.vb: SelectorExpression.Attribute(String, String, String)
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.Attribute(String, String, String)
  name.vb: Attribute(String, String, String)
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.PseudoClass(System.String)
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.PseudoClass(System.String)
  id: PseudoClass(System.String)
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: PseudoClass(string)
  nameWithType: SelectorExpression.PseudoClass(string)
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.PseudoClass(string)
  type: Method
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: PseudoClass
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 58
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: Creates a selector expression for a CSS pseudo-class.
  example: []
  syntax:
    content: public static SelectorExpression PseudoClass(string name)
    parameters:
    - id: name
      type: System.String
      description: Pseudo-class name without the leading ':'.
    return:
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    content.vb: Public Shared Function PseudoClass(name As String) As SelectorExpression
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.PseudoClass*
  nameWithType.vb: SelectorExpression.PseudoClass(String)
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.PseudoClass(String)
  name.vb: PseudoClass(String)
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.PseudoElement(System.String)
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.PseudoElement(System.String)
  id: PseudoElement(System.String)
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: PseudoElement(string)
  nameWithType: SelectorExpression.PseudoElement(string)
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.PseudoElement(string)
  type: Method
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: PseudoElement
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 64
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: Creates a selector expression for a CSS pseudo-element.
  example: []
  syntax:
    content: public static SelectorExpression PseudoElement(string name)
    parameters:
    - id: name
      type: System.String
      description: Pseudo-element name without the leading '::'.
    return:
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    content.vb: Public Shared Function PseudoElement(name As String) As SelectorExpression
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.PseudoElement*
  nameWithType.vb: SelectorExpression.PseudoElement(String)
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.PseudoElement(String)
  name.vb: PseudoElement(String)
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_Implicit(System.String)~RTB.Blazor.Styled.Helper.SelectorExpression
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.op_Implicit(System.String)~RTB.Blazor.Styled.Helper.SelectorExpression
  id: op_Implicit(System.String)~RTB.Blazor.Styled.Helper.SelectorExpression
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: implicit operator SelectorExpression(string)
  nameWithType: SelectorExpression.implicit operator SelectorExpression(string)
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.implicit operator RTB.Blazor.Styled.Helper.SelectorExpression(string)
  type: Operator
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: op_Implicit
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 70
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: Implicitly converts a raw string to a <xref href="RTB.Blazor.Styled.Helper.SelectorExpression" data-throw-if-not-resolved="false"></xref>. The string is used as-is.
  example: []
  syntax:
    content: public static implicit operator SelectorExpression(string literal)
    parameters:
    - id: literal
      type: System.String
      description: Raw CSS selector text.
    return:
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    content.vb: Public Shared Widening Operator CType(literal As String) As SelectorExpression
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.op_Implicit*
  nameWithType.vb: SelectorExpression.CType(String)
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.CType(String)
  name.vb: CType(String)
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_Implicit(RTB.Blazor.Styled.Helper.SelectorExpression)~System.String
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.op_Implicit(RTB.Blazor.Styled.Helper.SelectorExpression)~System.String
  id: op_Implicit(RTB.Blazor.Styled.Helper.SelectorExpression)~System.String
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: implicit operator string?(SelectorExpression?)
  nameWithType: SelectorExpression.implicit operator string?(SelectorExpression?)
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.implicit operator string?(RTB.Blazor.Styled.Helper.SelectorExpression?)
  type: Operator
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: op_Implicit
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 76
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: Implicitly converts a <xref href="RTB.Blazor.Styled.Helper.SelectorExpression" data-throw-if-not-resolved="false"></xref> to its string (CSS) representation.
  example: []
  syntax:
    content: public static implicit operator string?(SelectorExpression? expr)
    parameters:
    - id: expr
      type: RTB.Blazor.Styled.Helper.SelectorExpression
      description: Selector expression instance.
    return:
      type: System.String
    content.vb: Public Shared Widening Operator CType(expr As SelectorExpression) As String
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.op_Implicit*
  nameWithType.vb: SelectorExpression.CType(SelectorExpression)
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.CType(RTB.Blazor.Styled.Helper.SelectorExpression)
  name.vb: CType(SelectorExpression)
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.ToString
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.ToString
  id: ToString
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SelectorExpression.ToString()
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.ToString()
  type: Method
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: ToString
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 81
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: Renders the selector to CSS.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.ToString*
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.Render
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.Render
  id: Render
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: Render()
  nameWithType: SelectorExpression.Render()
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.Render()
  type: Method
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: Render
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 86
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: Renders the selector to CSS. Implemented by derived records.
  example: []
  syntax:
    content: protected abstract string Render()
    return:
      type: System.String
    content.vb: Protected MustOverride Function Render() As String
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.Render*
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_GreaterThan(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.op_GreaterThan(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  id: op_GreaterThan(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: operator >(SelectorExpression, SelectorExpression)
  nameWithType: SelectorExpression.operator >(SelectorExpression, SelectorExpression)
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.operator >(RTB.Blazor.Styled.Helper.SelectorExpression, RTB.Blazor.Styled.Helper.SelectorExpression)
  type: Operator
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: op_GreaterThan
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 99
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: 'Child combinator: selects direct children.'
  example:
  - SelectorExpression.Element("ul") &gt; SelectorExpression.Element("li") // "ul&gt;li"
  syntax:
    content: public static SelectorExpression operator >(SelectorExpression parent, SelectorExpression child)
    parameters:
    - id: parent
      type: RTB.Blazor.Styled.Helper.SelectorExpression
      description: Left selector (parent).
    - id: child
      type: RTB.Blazor.Styled.Helper.SelectorExpression
      description: Right selector (direct child).
    return:
      type: RTB.Blazor.Styled.Helper.SelectorExpression
      description: A combined selector using the '&gt;' combinator.
    content.vb: Public Shared Operator >(parent As SelectorExpression, child As SelectorExpression) As SelectorExpression
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.op_GreaterThan*
  nameWithType.vb: SelectorExpression.>(SelectorExpression, SelectorExpression)
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.>(RTB.Blazor.Styled.Helper.SelectorExpression, RTB.Blazor.Styled.Helper.SelectorExpression)
  name.vb: '>(SelectorExpression, SelectorExpression)'
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_LessThan(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.op_LessThan(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  id: op_LessThan(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: operator <(SelectorExpression, SelectorExpression)
  nameWithType: SelectorExpression.operator <(SelectorExpression, SelectorExpression)
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.operator <(RTB.Blazor.Styled.Helper.SelectorExpression, RTB.Blazor.Styled.Helper.SelectorExpression)
  type: Operator
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: op_LessThan
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 105
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: Not supported in CSS selector combinators.
  example: []
  syntax:
    content: >-
      [Obsolete("The '<' operator is not valid for CSS selectors.", true)]

      public static SelectorExpression operator <(SelectorExpression parent, SelectorExpression child)
    parameters:
    - id: parent
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    - id: child
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    return:
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    content.vb: >-
      <Obsolete("The '<' operator is not valid for CSS selectors.", True)>

      Public Shared Operator <(parent As SelectorExpression, child As SelectorExpression) As SelectorExpression
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.op_LessThan*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: The '<' operator is not valid for CSS selectors.
    - type: System.Boolean
      value: true
  nameWithType.vb: SelectorExpression.<(SelectorExpression, SelectorExpression)
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.<(RTB.Blazor.Styled.Helper.SelectorExpression, RTB.Blazor.Styled.Helper.SelectorExpression)
  name.vb: <(SelectorExpression, SelectorExpression)
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_Division(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.op_Division(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  id: op_Division(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: operator /(SelectorExpression, SelectorExpression)
  nameWithType: SelectorExpression.operator /(SelectorExpression, SelectorExpression)
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.operator /(RTB.Blazor.Styled.Helper.SelectorExpression, RTB.Blazor.Styled.Helper.SelectorExpression)
  type: Operator
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: op_Division
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 117
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: 'Descendant combinator: selects any level descendant (whitespace).'
  example:
  - SelectorExpression.Element("ul") / SelectorExpression.Element("li") // "ul li"
  syntax:
    content: public static SelectorExpression operator /(SelectorExpression parent, SelectorExpression descendant)
    parameters:
    - id: parent
      type: RTB.Blazor.Styled.Helper.SelectorExpression
      description: Ancestor selector.
    - id: descendant
      type: RTB.Blazor.Styled.Helper.SelectorExpression
      description: Descendant selector.
    return:
      type: RTB.Blazor.Styled.Helper.SelectorExpression
      description: A combined selector using a space.
    content.vb: Public Shared Operator /(parent As SelectorExpression, descendant As SelectorExpression) As SelectorExpression
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.op_Division*
  nameWithType.vb: SelectorExpression./(SelectorExpression, SelectorExpression)
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression./(RTB.Blazor.Styled.Helper.SelectorExpression, RTB.Blazor.Styled.Helper.SelectorExpression)
  name.vb: /(SelectorExpression, SelectorExpression)
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_Addition(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.op_Addition(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  id: op_Addition(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: operator +(SelectorExpression, SelectorExpression)
  nameWithType: SelectorExpression.operator +(SelectorExpression, SelectorExpression)
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.operator +(RTB.Blazor.Styled.Helper.SelectorExpression, RTB.Blazor.Styled.Helper.SelectorExpression)
  type: Operator
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: op_Addition
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 126
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: 'Adjacent sibling combinator: selects the immediate following sibling.'
  example:
  - SelectorExpression.Class("item") + SelectorExpression.Class("badge") // ".item+.badge"
  syntax:
    content: public static SelectorExpression operator +(SelectorExpression a, SelectorExpression b)
    parameters:
    - id: a
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    - id: b
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    return:
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    content.vb: Public Shared Operator +(a As SelectorExpression, b As SelectorExpression) As SelectorExpression
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.op_Addition*
  nameWithType.vb: SelectorExpression.+(SelectorExpression, SelectorExpression)
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.+(RTB.Blazor.Styled.Helper.SelectorExpression, RTB.Blazor.Styled.Helper.SelectorExpression)
  name.vb: +(SelectorExpression, SelectorExpression)
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_BitwiseAnd(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.op_BitwiseAnd(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  id: op_BitwiseAnd(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: operator &(SelectorExpression, SelectorExpression)
  nameWithType: SelectorExpression.operator &(SelectorExpression, SelectorExpression)
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.operator &(RTB.Blazor.Styled.Helper.SelectorExpression, RTB.Blazor.Styled.Helper.SelectorExpression)
  type: Operator
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: op_BitwiseAnd
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 135
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: 'General sibling combinator: selects any following sibling.'
  example:
  - SelectorExpression.Class("item") &amp; SelectorExpression.Class("badge") // ".item~.badge"
  syntax:
    content: public static SelectorExpression operator &(SelectorExpression a, SelectorExpression b)
    parameters:
    - id: a
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    - id: b
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    return:
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    content.vb: Public Shared Operator And(a As SelectorExpression, b As SelectorExpression) As SelectorExpression
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.op_BitwiseAnd*
  nameWithType.vb: SelectorExpression.And(SelectorExpression, SelectorExpression)
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.And(RTB.Blazor.Styled.Helper.SelectorExpression, RTB.Blazor.Styled.Helper.SelectorExpression)
  name.vb: And(SelectorExpression, SelectorExpression)
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_BitwiseOr(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.op_BitwiseOr(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  id: op_BitwiseOr(RTB.Blazor.Styled.Helper.SelectorExpression,RTB.Blazor.Styled.Helper.SelectorExpression)
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  langs:
  - csharp
  - vb
  name: operator |(SelectorExpression, SelectorExpression)
  nameWithType: SelectorExpression.operator |(SelectorExpression, SelectorExpression)
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.operator |(RTB.Blazor.Styled.Helper.SelectorExpression, RTB.Blazor.Styled.Helper.SelectorExpression)
  type: Operator
  source:
    remote:
      path: src/RTB.Styled/Helper/SelectorExpression.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: op_BitwiseOr
    path: ../src/RTB.Styled/Helper/SelectorExpression.cs
    startLine: 144
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Helper
  summary: 'Grouping selector: combines selectors separated by commas.'
  example:
  - (SelectorExpression.Element("h1") | SelectorExpression.Element("h2")).ToString() // "h1, h2"
  syntax:
    content: public static SelectorExpression operator |(SelectorExpression a, SelectorExpression b)
    parameters:
    - id: a
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    - id: b
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    return:
      type: RTB.Blazor.Styled.Helper.SelectorExpression
    content.vb: Public Shared Operator Or(a As SelectorExpression, b As SelectorExpression) As SelectorExpression
  overload: RTB.Blazor.Styled.Helper.SelectorExpression.op_BitwiseOr*
  nameWithType.vb: SelectorExpression.Or(SelectorExpression, SelectorExpression)
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.Or(RTB.Blazor.Styled.Helper.SelectorExpression, RTB.Blazor.Styled.Helper.SelectorExpression)
  name.vb: Or(SelectorExpression, SelectorExpression)
references:
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.ToString
  commentId: M:RTB.Blazor.Styled.Helper.SelectorExpression.ToString
  parent: RTB.Blazor.Styled.Helper.SelectorExpression
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_ToString
  name: ToString()
  nameWithType: SelectorExpression.ToString()
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.ToString()
  spec.csharp:
  - uid: RTB.Blazor.Styled.Helper.SelectorExpression.ToString
    name: ToString
    href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_ToString
  - name: (
  - name: )
  spec.vb:
  - uid: RTB.Blazor.Styled.Helper.SelectorExpression.ToString
    name: ToString
    href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_ToString
  - name: (
  - name: )
- uid: RTB.Blazor.Styled.Helper
  commentId: N:RTB.Blazor.Styled.Helper
  href: RTB.html
  name: RTB.Blazor.Styled.Helper
  nameWithType: RTB.Blazor.Styled.Helper
  fullName: RTB.Blazor.Styled.Helper
  spec.csharp:
  - uid: RTB
    name: RTB
    href: RTB.html
  - name: .
  - uid: RTB.Blazor
    name: Blazor
    href: RTB.Blazor.html
  - name: .
  - uid: RTB.Blazor.Styled
    name: Styled
    href: RTB.Blazor.Styled.html
  - name: .
  - uid: RTB.Blazor.Styled.Helper
    name: Helper
    href: RTB.Blazor.Styled.Helper.html
  spec.vb:
  - uid: RTB
    name: RTB
    href: RTB.html
  - name: .
  - uid: RTB.Blazor
    name: Blazor
    href: RTB.Blazor.html
  - name: .
  - uid: RTB.Blazor.Styled
    name: Styled
    href: RTB.Blazor.Styled.html
  - name: .
  - uid: RTB.Blazor.Styled.Helper
    name: Helper
    href: RTB.Blazor.Styled.Helper.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IEquatable{RTB.Blazor.Styled.Helper.SelectorExpression}
  commentId: T:System.IEquatable{RTB.Blazor.Styled.Helper.SelectorExpression}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<SelectorExpression>
  nameWithType: IEquatable<SelectorExpression>
  fullName: System.IEquatable<RTB.Blazor.Styled.Helper.SelectorExpression>
  nameWithType.vb: IEquatable(Of SelectorExpression)
  fullName.vb: System.IEquatable(Of RTB.Blazor.Styled.Helper.SelectorExpression)
  name.vb: IEquatable(Of SelectorExpression)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: RTB.Blazor.Styled.Helper.SelectorExpression
    name: SelectorExpression
    href: RTB.Blazor.Styled.Helper.SelectorExpression.html
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: RTB.Blazor.Styled.Helper.SelectorExpression
    name: SelectorExpression
    href: RTB.Blazor.Styled.Helper.SelectorExpression.html
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: RTB.Blazor.Styled.Helper.SelectorExpression
  commentId: T:RTB.Blazor.Styled.Helper.SelectorExpression
  parent: RTB.Blazor.Styled.Helper
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html
  name: SelectorExpression
  nameWithType: SelectorExpression
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.Element*
  commentId: Overload:RTB.Blazor.Styled.Helper.SelectorExpression.Element
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_Element_System_String_
  name: Element
  nameWithType: SelectorExpression.Element
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.Element
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.Id*
  commentId: Overload:RTB.Blazor.Styled.Helper.SelectorExpression.Id
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_Id_System_String_
  name: Id
  nameWithType: SelectorExpression.Id
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.Id
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.Class*
  commentId: Overload:RTB.Blazor.Styled.Helper.SelectorExpression.Class
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_Class_System_String_
  name: Class
  nameWithType: SelectorExpression.Class
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.Class
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.Attribute*
  commentId: Overload:RTB.Blazor.Styled.Helper.SelectorExpression.Attribute
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_Attribute_System_String_System_String_System_String_
  name: Attribute
  nameWithType: SelectorExpression.Attribute
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.Attribute
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.PseudoClass*
  commentId: Overload:RTB.Blazor.Styled.Helper.SelectorExpression.PseudoClass
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_PseudoClass_System_String_
  name: PseudoClass
  nameWithType: SelectorExpression.PseudoClass
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.PseudoClass
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.PseudoElement*
  commentId: Overload:RTB.Blazor.Styled.Helper.SelectorExpression.PseudoElement
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_PseudoElement_System_String_
  name: PseudoElement
  nameWithType: SelectorExpression.PseudoElement
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.PseudoElement
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_Implicit*
  commentId: Overload:RTB.Blazor.Styled.Helper.SelectorExpression.op_Implicit
  name: implicit operator
  nameWithType: SelectorExpression.implicit operator
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.implicit operator
  nameWithType.vb: SelectorExpression.CType
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.ToString*
  commentId: Overload:RTB.Blazor.Styled.Helper.SelectorExpression.ToString
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_ToString
  name: ToString
  nameWithType: SelectorExpression.ToString
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.ToString
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.Render*
  commentId: Overload:RTB.Blazor.Styled.Helper.SelectorExpression.Render
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_Render
  name: Render
  nameWithType: SelectorExpression.Render
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.Render
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_GreaterThan*
  commentId: Overload:RTB.Blazor.Styled.Helper.SelectorExpression.op_GreaterThan
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_op_GreaterThan_RTB_Blazor_Styled_Helper_SelectorExpression_RTB_Blazor_Styled_Helper_SelectorExpression_
  name: operator >
  nameWithType: SelectorExpression.operator >
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.operator >
  nameWithType.vb: SelectorExpression.>
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.>
  name.vb: '>'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_GreaterThan*
    name: '>'
    href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_op_GreaterThan_RTB_Blazor_Styled_Helper_SelectorExpression_RTB_Blazor_Styled_Helper_SelectorExpression_
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_LessThan*
  commentId: Overload:RTB.Blazor.Styled.Helper.SelectorExpression.op_LessThan
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_op_LessThan_RTB_Blazor_Styled_Helper_SelectorExpression_RTB_Blazor_Styled_Helper_SelectorExpression_
  name: operator <
  nameWithType: SelectorExpression.operator <
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.operator <
  nameWithType.vb: SelectorExpression.<
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.<
  name.vb: <
  spec.csharp:
  - name: operator
  - name: " "
  - uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_LessThan*
    name: <
    href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_op_LessThan_RTB_Blazor_Styled_Helper_SelectorExpression_RTB_Blazor_Styled_Helper_SelectorExpression_
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_Division*
  commentId: Overload:RTB.Blazor.Styled.Helper.SelectorExpression.op_Division
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_op_Division_RTB_Blazor_Styled_Helper_SelectorExpression_RTB_Blazor_Styled_Helper_SelectorExpression_
  name: operator /
  nameWithType: SelectorExpression.operator /
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.operator /
  nameWithType.vb: SelectorExpression./
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression./
  name.vb: /
  spec.csharp:
  - name: operator
  - name: " "
  - uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_Division*
    name: /
    href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_op_Division_RTB_Blazor_Styled_Helper_SelectorExpression_RTB_Blazor_Styled_Helper_SelectorExpression_
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_Addition*
  commentId: Overload:RTB.Blazor.Styled.Helper.SelectorExpression.op_Addition
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_op_Addition_RTB_Blazor_Styled_Helper_SelectorExpression_RTB_Blazor_Styled_Helper_SelectorExpression_
  name: operator +
  nameWithType: SelectorExpression.operator +
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.operator +
  nameWithType.vb: SelectorExpression.+
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_Addition*
    name: +
    href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_op_Addition_RTB_Blazor_Styled_Helper_SelectorExpression_RTB_Blazor_Styled_Helper_SelectorExpression_
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_BitwiseAnd*
  commentId: Overload:RTB.Blazor.Styled.Helper.SelectorExpression.op_BitwiseAnd
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_op_BitwiseAnd_RTB_Blazor_Styled_Helper_SelectorExpression_RTB_Blazor_Styled_Helper_SelectorExpression_
  name: operator &
  nameWithType: SelectorExpression.operator &
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.operator &
  nameWithType.vb: SelectorExpression.And
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.And
  name.vb: And
  spec.csharp:
  - name: operator
  - name: " "
  - uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_BitwiseAnd*
    name: '&'
    href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_op_BitwiseAnd_RTB_Blazor_Styled_Helper_SelectorExpression_RTB_Blazor_Styled_Helper_SelectorExpression_
- uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_BitwiseOr*
  commentId: Overload:RTB.Blazor.Styled.Helper.SelectorExpression.op_BitwiseOr
  href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_op_BitwiseOr_RTB_Blazor_Styled_Helper_SelectorExpression_RTB_Blazor_Styled_Helper_SelectorExpression_
  name: operator |
  nameWithType: SelectorExpression.operator |
  fullName: RTB.Blazor.Styled.Helper.SelectorExpression.operator |
  nameWithType.vb: SelectorExpression.Or
  fullName.vb: RTB.Blazor.Styled.Helper.SelectorExpression.Or
  name.vb: Or
  spec.csharp:
  - name: operator
  - name: " "
  - uid: RTB.Blazor.Styled.Helper.SelectorExpression.op_BitwiseOr*
    name: '|'
    href: RTB.Blazor.Styled.Helper.SelectorExpression.html#RTB_Blazor_Styled_Helper_SelectorExpression_op_BitwiseOr_RTB_Blazor_Styled_Helper_SelectorExpression_RTB_Blazor_Styled_Helper_SelectorExpression_
