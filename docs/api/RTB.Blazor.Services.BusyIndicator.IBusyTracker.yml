### YamlMime:ManagedReference
items:
- uid: RTB.Blazor.Services.BusyIndicator.IBusyTracker
  commentId: T:RTB.Blazor.Services.BusyIndicator.IBusyTracker
  id: IBusyTracker
  parent: RTB.Blazor.Services.BusyIndicator
  children:
  - RTB.Blazor.Services.BusyIndicator.IBusyTracker.Await(System.String)
  - RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsAnyBusy
  - RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsBusy(System.String)
  - RTB.Blazor.Services.BusyIndicator.IBusyTracker.OnBusyChanged
  - RTB.Blazor.Services.BusyIndicator.IBusyTracker.Track(System.String,System.Action)
  - RTB.Blazor.Services.BusyIndicator.IBusyTracker.Tracks
  langs:
  - csharp
  - vb
  name: IBusyTracker
  nameWithType: IBusyTracker
  fullName: RTB.Blazor.Services.BusyIndicator.IBusyTracker
  type: Interface
  source:
    remote:
      path: src/RTB.BlazorUI/Services/BusyIndicator/BusyTracker.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: IBusyTracker
    path: ../src/RTB.BlazorUI/Services/BusyIndicator/BusyTracker.cs
    startLine: 14
  assemblies:
  - RTB.Blazor
  namespace: RTB.Blazor.Services.BusyIndicator
  summary: >-
    Abstraction for tracking and reacting to "busy" states during asynchronous or long-running operations.

    Useful for driving UI concerns such as spinners, disabling actions, or detecting background work.
  remarks: >-
    Thread-safe. Multiple independent scopes can be tracked per key.

    Keys are case-sensitive. Passing null or empty when supported indicates "any key".
  example: []
  syntax:
    content: public interface IBusyTracker
    content.vb: Public Interface IBusyTracker
- uid: RTB.Blazor.Services.BusyIndicator.IBusyTracker.OnBusyChanged
  commentId: E:RTB.Blazor.Services.BusyIndicator.IBusyTracker.OnBusyChanged
  id: OnBusyChanged
  parent: RTB.Blazor.Services.BusyIndicator.IBusyTracker
  langs:
  - csharp
  - vb
  name: OnBusyChanged
  nameWithType: IBusyTracker.OnBusyChanged
  fullName: RTB.Blazor.Services.BusyIndicator.IBusyTracker.OnBusyChanged
  type: Event
  source:
    remote:
      path: src/RTB.BlazorUI/Services/BusyIndicator/BusyTracker.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: OnBusyChanged
    path: ../src/RTB.BlazorUI/Services/BusyIndicator/BusyTracker.cs
    startLine: 25
  assemblies:
  - RTB.Blazor
  namespace: RTB.Blazor.Services.BusyIndicator
  summary: >-
    Raised whenever the busy state changes for any key (work started or finished).

    The string argument contains the affected key; it may be null when callers check "any" state.
  remarks: >-
    In Blazor components, prefer invoking UI updates via InvokeAsync(StateHasChanged)

    from this callback to avoid threading issues.

    This event may fire frequently; keep handlers lightweight.
  example: []
  syntax:
    content: event Action<string?>? OnBusyChanged
    return:
      type: System.Action{System.String}
    content.vb: Event OnBusyChanged As Action(Of String)
- uid: RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsBusy(System.String)
  commentId: M:RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsBusy(System.String)
  id: IsBusy(System.String)
  parent: RTB.Blazor.Services.BusyIndicator.IBusyTracker
  langs:
  - csharp
  - vb
  name: IsBusy(string?)
  nameWithType: IBusyTracker.IsBusy(string?)
  fullName: RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsBusy(string?)
  type: Method
  source:
    remote:
      path: src/RTB.BlazorUI/Services/BusyIndicator/BusyTracker.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: IsBusy
    path: ../src/RTB.BlazorUI/Services/BusyIndicator/BusyTracker.cs
    startLine: 37
  assemblies:
  - RTB.Blazor
  namespace: RTB.Blazor.Services.BusyIndicator
  summary: Determines whether the specified key is currently busy.
  example: []
  syntax:
    content: bool IsBusy(string? key = null)
    parameters:
    - id: key
      type: System.String
      description: The key to check. When null or empty, this reports whether any key is busy (<xref href="RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsAnyBusy" data-throw-if-not-resolved="false"></xref>).
    return:
      type: System.Boolean
      description: >-
        True if the specified key has an outstanding busy count greater than zero;

        or, when key is null/empty, true if any key is busy.
    content.vb: Function IsBusy(key As String = Nothing) As Boolean
  overload: RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsBusy*
  nameWithType.vb: IBusyTracker.IsBusy(String)
  fullName.vb: RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsBusy(String)
  name.vb: IsBusy(String)
- uid: RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsAnyBusy
  commentId: P:RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsAnyBusy
  id: IsAnyBusy
  parent: RTB.Blazor.Services.BusyIndicator.IBusyTracker
  langs:
  - csharp
  - vb
  name: IsAnyBusy
  nameWithType: IBusyTracker.IsAnyBusy
  fullName: RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsAnyBusy
  type: Property
  source:
    remote:
      path: src/RTB.BlazorUI/Services/BusyIndicator/BusyTracker.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: IsAnyBusy
    path: ../src/RTB.BlazorUI/Services/BusyIndicator/BusyTracker.cs
    startLine: 42
  assemblies:
  - RTB.Blazor
  namespace: RTB.Blazor.Services.BusyIndicator
  summary: Indicates whether any tracked key is currently busy.
  example: []
  syntax:
    content: bool IsAnyBusy { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsAnyBusy As Boolean
  overload: RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsAnyBusy*
- uid: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Track(System.String,System.Action)
  commentId: M:RTB.Blazor.Services.BusyIndicator.IBusyTracker.Track(System.String,System.Action)
  id: Track(System.String,System.Action)
  parent: RTB.Blazor.Services.BusyIndicator.IBusyTracker
  langs:
  - csharp
  - vb
  name: Track(string, Action?)
  nameWithType: IBusyTracker.Track(string, Action?)
  fullName: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Track(string, System.Action?)
  type: Method
  source:
    remote:
      path: src/RTB.BlazorUI/Services/BusyIndicator/BusyTracker.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: Track
    path: ../src/RTB.BlazorUI/Services/BusyIndicator/BusyTracker.cs
    startLine: 61
  assemblies:
  - RTB.Blazor
  namespace: RTB.Blazor.Services.BusyIndicator
  summary: Begins tracking a busy scope for the specified key and returns a token that ends the scope on dispose.
  example:
  - >-
    using var _ = busyTracker.Track(); // key becomes the caller's method name

    await DoWorkAsync();

    // disposing '_' marks this scope as complete
  syntax:
    content: IDisposable Track(string method = "", Action? onDispose = null)
    parameters:
    - id: method
      type: System.String
      description: The key to track. Defaults to the caller's member name via <xref href="System.Runtime.CompilerServices.CallerMemberNameAttribute" data-throw-if-not-resolved="false"></xref>.
    - id: onDispose
      type: System.Action
      description: Optional callback invoked after the busy scope is ended and the internal count is decremented/cleared.
    return:
      type: System.IDisposable
      description: An <xref href="System.IDisposable" data-throw-if-not-resolved="false"></xref> token. Dispose to end the busy scope. Intended to be used with a using statement.
    content.vb: Function Track(method As String = "", onDispose As Action = Nothing) As IDisposable
  overload: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Track*
  nameWithType.vb: IBusyTracker.Track(String, Action)
  fullName.vb: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Track(String, System.Action)
  name.vb: Track(String, Action)
- uid: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Tracks
  commentId: P:RTB.Blazor.Services.BusyIndicator.IBusyTracker.Tracks
  id: Tracks
  parent: RTB.Blazor.Services.BusyIndicator.IBusyTracker
  langs:
  - csharp
  - vb
  name: Tracks
  nameWithType: IBusyTracker.Tracks
  fullName: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Tracks
  type: Property
  source:
    remote:
      path: src/RTB.BlazorUI/Services/BusyIndicator/BusyTracker.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: Tracks
    path: ../src/RTB.BlazorUI/Services/BusyIndicator/BusyTracker.cs
    startLine: 66
  assemblies:
  - RTB.Blazor
  namespace: RTB.Blazor.Services.BusyIndicator
  summary: The set of keys that are currently busy (i.e., have a positive outstanding count).
  example: []
  syntax:
    content: string[] Tracks { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: ReadOnly Property Tracks As String()
  overload: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Tracks*
- uid: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Await(System.String)
  commentId: M:RTB.Blazor.Services.BusyIndicator.IBusyTracker.Await(System.String)
  id: Await(System.String)
  parent: RTB.Blazor.Services.BusyIndicator.IBusyTracker
  langs:
  - csharp
  - vb
  name: Await(string)
  nameWithType: IBusyTracker.Await(string)
  fullName: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Await(string)
  type: Method
  source:
    remote:
      path: src/RTB.BlazorUI/Services/BusyIndicator/BusyTracker.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: Await
    path: ../src/RTB.BlazorUI/Services/BusyIndicator/BusyTracker.cs
    startLine: 80
  assemblies:
  - RTB.Blazor
  namespace: RTB.Blazor.Services.BusyIndicator
  summary: Returns a task that completes when the specified key is no longer busy.
  remarks: >-
    Only a single waiter is maintained per key; subsequent calls overwrite previous waiters.

    Continuations run asynchronously.
  example: []
  syntax:
    content: Task Await(string key)
    parameters:
    - id: key
      type: System.String
      description: The key to await completion for.
    return:
      type: System.Threading.Tasks.Task
      description: >-
        A task that completes when the key's busy count reaches zero.

        If the key is not currently busy, the task is already completed.
    content.vb: Function Await(key As String) As Task
  overload: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Await*
  nameWithType.vb: IBusyTracker.Await(String)
  fullName.vb: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Await(String)
  name.vb: Await(String)
references:
- uid: RTB.Blazor.Services.BusyIndicator
  commentId: N:RTB.Blazor.Services.BusyIndicator
  href: RTB.html
  name: RTB.Blazor.Services.BusyIndicator
  nameWithType: RTB.Blazor.Services.BusyIndicator
  fullName: RTB.Blazor.Services.BusyIndicator
  spec.csharp:
  - uid: RTB
    name: RTB
    href: RTB.html
  - name: .
  - uid: RTB.Blazor
    name: Blazor
    href: RTB.Blazor.html
  - name: .
  - uid: RTB.Blazor.Services
    name: Services
    href: RTB.Blazor.Services.html
  - name: .
  - uid: RTB.Blazor.Services.BusyIndicator
    name: BusyIndicator
    href: RTB.Blazor.Services.BusyIndicator.html
  spec.vb:
  - uid: RTB
    name: RTB
    href: RTB.html
  - name: .
  - uid: RTB.Blazor
    name: Blazor
    href: RTB.Blazor.html
  - name: .
  - uid: RTB.Blazor.Services
    name: Services
    href: RTB.Blazor.Services.html
  - name: .
  - uid: RTB.Blazor.Services.BusyIndicator
    name: BusyIndicator
    href: RTB.Blazor.Services.BusyIndicator.html
- uid: System.Action{System.String}
  commentId: T:System.Action{System.String}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<string>
  nameWithType: Action<string>
  fullName: System.Action<string>
  nameWithType.vb: Action(Of String)
  fullName.vb: System.Action(Of String)
  name.vb: Action(Of String)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsAnyBusy
  commentId: P:RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsAnyBusy
  parent: RTB.Blazor.Services.BusyIndicator.IBusyTracker
  href: RTB.Blazor.Services.BusyIndicator.IBusyTracker.html#RTB_Blazor_Services_BusyIndicator_IBusyTracker_IsAnyBusy
  name: IsAnyBusy
  nameWithType: IBusyTracker.IsAnyBusy
  fullName: RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsAnyBusy
- uid: RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsBusy*
  commentId: Overload:RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsBusy
  href: RTB.Blazor.Services.BusyIndicator.IBusyTracker.html#RTB_Blazor_Services_BusyIndicator_IBusyTracker_IsBusy_System_String_
  name: IsBusy
  nameWithType: IBusyTracker.IsBusy
  fullName: RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsBusy
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: RTB.Blazor.Services.BusyIndicator.IBusyTracker
  commentId: T:RTB.Blazor.Services.BusyIndicator.IBusyTracker
  parent: RTB.Blazor.Services.BusyIndicator
  href: RTB.Blazor.Services.BusyIndicator.IBusyTracker.html
  name: IBusyTracker
  nameWithType: IBusyTracker
  fullName: RTB.Blazor.Services.BusyIndicator.IBusyTracker
- uid: RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsAnyBusy*
  commentId: Overload:RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsAnyBusy
  href: RTB.Blazor.Services.BusyIndicator.IBusyTracker.html#RTB_Blazor_Services_BusyIndicator_IBusyTracker_IsAnyBusy
  name: IsAnyBusy
  nameWithType: IBusyTracker.IsAnyBusy
  fullName: RTB.Blazor.Services.BusyIndicator.IBusyTracker.IsAnyBusy
- uid: System.Runtime.CompilerServices.CallerMemberNameAttribute
  commentId: T:System.Runtime.CompilerServices.CallerMemberNameAttribute
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.runtime.compilerservices.callermembernameattribute
  name: CallerMemberNameAttribute
  nameWithType: CallerMemberNameAttribute
  fullName: System.Runtime.CompilerServices.CallerMemberNameAttribute
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Track*
  commentId: Overload:RTB.Blazor.Services.BusyIndicator.IBusyTracker.Track
  href: RTB.Blazor.Services.BusyIndicator.IBusyTracker.html#RTB_Blazor_Services_BusyIndicator_IBusyTracker_Track_System_String_System_Action_
  name: Track
  nameWithType: IBusyTracker.Track
  fullName: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Track
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Tracks*
  commentId: Overload:RTB.Blazor.Services.BusyIndicator.IBusyTracker.Tracks
  href: RTB.Blazor.Services.BusyIndicator.IBusyTracker.html#RTB_Blazor_Services_BusyIndicator_IBusyTracker_Tracks
  name: Tracks
  nameWithType: IBusyTracker.Tracks
  fullName: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Tracks
- uid: System.String[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string[]
  nameWithType: string[]
  fullName: string[]
  nameWithType.vb: String()
  fullName.vb: String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: (
  - name: )
- uid: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Await*
  commentId: Overload:RTB.Blazor.Services.BusyIndicator.IBusyTracker.Await
  href: RTB.Blazor.Services.BusyIndicator.IBusyTracker.html#RTB_Blazor_Services_BusyIndicator_IBusyTracker_Await_System_String_
  name: Await
  nameWithType: IBusyTracker.Await
  fullName: RTB.Blazor.Services.BusyIndicator.IBusyTracker.Await
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
