### YamlMime:ManagedReference
items:
- uid: RTB.Blazor.Styled.Core.SelectorRule
  commentId: T:RTB.Blazor.Styled.Core.SelectorRule
  id: SelectorRule
  parent: RTB.Blazor.Styled.Core
  children:
  - RTB.Blazor.Styled.Core.SelectorRule.#ctor(System.String)
  - RTB.Blazor.Styled.Core.SelectorRule.Children
  - RTB.Blazor.Styled.Core.SelectorRule.Declarations
  - RTB.Blazor.Styled.Core.SelectorRule.Emit(RTB.Blazor.Styled.Core.ScopedWriter)
  - RTB.Blazor.Styled.Core.SelectorRule.Selector
  langs:
  - csharp
  - vb
  name: SelectorRule
  nameWithType: SelectorRule
  fullName: RTB.Blazor.Styled.Core.SelectorRule
  type: Class
  source:
    remote:
      path: src/RTB.Styled/Core/SelectorRule.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: SelectorRule
    path: ../src/RTB.Styled/Core/SelectorRule.cs
    startLine: 48
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Core
  summary: >-
    Represents a CSS-like selector rule that emits its own declarations and any child fragments

    relative to the current selector scope provided by a <xref href="RTB.Blazor.Styled.Core.ScopedWriter" data-throw-if-not-resolved="false"></xref>.
  remarks: >-
    <ul><li>
          Supports comma-delimited selector lists (e.g., ".a, .b"). Each part is processed independently.
        </li><li>
          Supports '&amp;' as a placeholder for the current scope, but only when the selector text
          starts with '&amp;' (e.g., "&amp;:hover", "&amp; &gt; .child"). In that case, all '&amp;' are
          replaced with the current scope.
        </li><li>
          When the selector part is null, empty, or whitespace, the current scope is used as-is.
        </li><li>
          A rule block is written only when <xref href="RTB.Blazor.Styled.Core.SelectorRule.Declarations" data-throw-if-not-resolved="false"></xref> is not empty; however,
          <xref href="RTB.Blazor.Styled.Core.SelectorRule.Children" data-throw-if-not-resolved="false"></xref> are still emitted within the resolved scope regardless of whether
          declarations exist.
        </li></ul>
    <example>

    Given a current scope ".parent":

    - Selector ".child" resolves to ".parent .child"

    - Selector "&amp;:hover" resolves to ".parent:hover"

    - Selector "&amp; &gt; .child" resolves to ".parent &gt; .child"

    - Selector "" (empty) resolves to ".parent"

    - Selector ".a, .b" resolves and emits for ".parent .a" and ".parent .b" independently

    </example>
  example: []
  syntax:
    content: 'public sealed class SelectorRule : IStyleFragment'
    content.vb: Public NotInheritable Class SelectorRule Implements IStyleFragment
  inheritance:
  - System.Object
  implements:
  - RTB.Blazor.Styled.Core.IStyleFragment
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: RTB.Blazor.Styled.Core.SelectorRule.Selector
  commentId: P:RTB.Blazor.Styled.Core.SelectorRule.Selector
  id: Selector
  parent: RTB.Blazor.Styled.Core.SelectorRule
  langs:
  - csharp
  - vb
  name: Selector
  nameWithType: SelectorRule.Selector
  fullName: RTB.Blazor.Styled.Core.SelectorRule.Selector
  type: Property
  source:
    remote:
      path: src/RTB.Styled/Core/SelectorRule.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: Selector
    path: ../src/RTB.Styled/Core/SelectorRule.cs
    startLine: 58
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Core
  summary: >-
    Gets the raw selector text for this rule.

    May contain a comma-delimited list and/or '&amp;' placeholders.
  example: []
  syntax:
    content: public string Selector { get; }
    parameters: []
    return:
      type: System.String
      description: >-
        The unprocessed selector text. When null is provided to the constructor,

        this is set to <xref href="System.String.Empty" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public ReadOnly Property Selector As String
  overload: RTB.Blazor.Styled.Core.SelectorRule.Selector*
- uid: RTB.Blazor.Styled.Core.SelectorRule.Declarations
  commentId: P:RTB.Blazor.Styled.Core.SelectorRule.Declarations
  id: Declarations
  parent: RTB.Blazor.Styled.Core.SelectorRule
  langs:
  - csharp
  - vb
  name: Declarations
  nameWithType: SelectorRule.Declarations
  fullName: RTB.Blazor.Styled.Core.SelectorRule.Declarations
  type: Property
  source:
    remote:
      path: src/RTB.Styled/Core/SelectorRule.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: Declarations
    path: ../src/RTB.Styled/Core/SelectorRule.cs
    startLine: 67
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Core
  summary: The declarations to emit for the resolved selector(s).
  remarks: >-
    If <xref href="RTB.Blazor.Styled.Core.DeclarationSet.IsEmpty" data-throw-if-not-resolved="false"></xref> is true, no rule block is written.

    Child fragments are still emitted within the resolved scope.
  example: []
  syntax:
    content: public DeclarationSet Declarations { get; init; }
    parameters: []
    return:
      type: RTB.Blazor.Styled.Core.DeclarationSet
    content.vb: Public Property Declarations As DeclarationSet
  overload: RTB.Blazor.Styled.Core.SelectorRule.Declarations*
- uid: RTB.Blazor.Styled.Core.SelectorRule.Children
  commentId: P:RTB.Blazor.Styled.Core.SelectorRule.Children
  id: Children
  parent: RTB.Blazor.Styled.Core.SelectorRule
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: SelectorRule.Children
  fullName: RTB.Blazor.Styled.Core.SelectorRule.Children
  type: Property
  source:
    remote:
      path: src/RTB.Styled/Core/SelectorRule.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: Children
    path: ../src/RTB.Styled/Core/SelectorRule.cs
    startLine: 76
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Core
  summary: Nested style fragments that will be emitted within the resolved selector scope.
  remarks: >-
    Emitted via <xref href="RTB.Blazor.Styled.Core.ScopedWriter.WithSelector(System.String%2cSystem.Action)" data-throw-if-not-resolved="false"></xref> for each resolved selector part.

    This occurs even when <xref href="RTB.Blazor.Styled.Core.SelectorRule.Declarations" data-throw-if-not-resolved="false"></xref> is empty.
  example: []
  syntax:
    content: public List<IStyleFragment> Children { get; init; }
    parameters: []
    return:
      type: System.Collections.Generic.List{RTB.Blazor.Styled.Core.IStyleFragment}
    content.vb: Public Property Children As List(Of IStyleFragment)
  overload: RTB.Blazor.Styled.Core.SelectorRule.Children*
- uid: RTB.Blazor.Styled.Core.SelectorRule.#ctor(System.String)
  commentId: M:RTB.Blazor.Styled.Core.SelectorRule.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: RTB.Blazor.Styled.Core.SelectorRule
  langs:
  - csharp
  - vb
  name: SelectorRule(string)
  nameWithType: SelectorRule.SelectorRule(string)
  fullName: RTB.Blazor.Styled.Core.SelectorRule.SelectorRule(string)
  type: Constructor
  source:
    remote:
      path: src/RTB.Styled/Core/SelectorRule.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: .ctor
    path: ../src/RTB.Styled/Core/SelectorRule.cs
    startLine: 84
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Core
  summary: Initializes a new instance of the <xref href="RTB.Blazor.Styled.Core.SelectorRule" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public SelectorRule(string selector)
    parameters:
    - id: selector
      type: System.String
      description: The selector to resolve against the current scope; when null, an empty string is used.
    content.vb: Public Sub New(selector As String)
  overload: RTB.Blazor.Styled.Core.SelectorRule.#ctor*
  nameWithType.vb: SelectorRule.New(String)
  fullName.vb: RTB.Blazor.Styled.Core.SelectorRule.New(String)
  name.vb: New(String)
- uid: RTB.Blazor.Styled.Core.SelectorRule.Emit(RTB.Blazor.Styled.Core.ScopedWriter)
  commentId: M:RTB.Blazor.Styled.Core.SelectorRule.Emit(RTB.Blazor.Styled.Core.ScopedWriter)
  id: Emit(RTB.Blazor.Styled.Core.ScopedWriter)
  parent: RTB.Blazor.Styled.Core.SelectorRule
  langs:
  - csharp
  - vb
  name: Emit(ScopedWriter)
  nameWithType: SelectorRule.Emit(ScopedWriter)
  fullName: RTB.Blazor.Styled.Core.SelectorRule.Emit(RTB.Blazor.Styled.Core.ScopedWriter)
  type: Method
  source:
    remote:
      path: src/RTB.Styled/Core/SelectorRule.cs
      branch: develop
      repo: https://github.com/IIFabixn/RTB.BlazorUI.git
    id: Emit
    path: ../src/RTB.Styled/Core/SelectorRule.cs
    startLine: 94
  assemblies:
  - RTB.Blazor.Styled
  namespace: RTB.Blazor.Styled.Core
  summary: >-
    Emits CSS for this rule:

    - Splits the selector into comma-delimited parts.

    - Resolves each part against the current scope.

    - Writes a rule block when declarations exist.

    - Recursively emits children within the resolved scope.
  example: []
  syntax:
    content: public void Emit(ScopedWriter w)
    parameters:
    - id: w
      type: RTB.Blazor.Styled.Core.ScopedWriter
      description: The scoped writer that manages the selector stack and writes CSS.
    content.vb: Public Sub Emit(w As ScopedWriter)
  overload: RTB.Blazor.Styled.Core.SelectorRule.Emit*
  implements:
  - RTB.Blazor.Styled.Core.IStyleFragment.Emit(RTB.Blazor.Styled.Core.ScopedWriter)
references:
- uid: RTB.Blazor.Styled.Core.ScopedWriter
  commentId: T:RTB.Blazor.Styled.Core.ScopedWriter
  parent: RTB.Blazor.Styled.Core
  href: RTB.Blazor.Styled.Core.ScopedWriter.html
  name: ScopedWriter
  nameWithType: ScopedWriter
  fullName: RTB.Blazor.Styled.Core.ScopedWriter
- uid: RTB.Blazor.Styled.Core.SelectorRule.Declarations
  commentId: P:RTB.Blazor.Styled.Core.SelectorRule.Declarations
  href: RTB.Blazor.Styled.Core.SelectorRule.html#RTB_Blazor_Styled_Core_SelectorRule_Declarations
  name: Declarations
  nameWithType: SelectorRule.Declarations
  fullName: RTB.Blazor.Styled.Core.SelectorRule.Declarations
- uid: RTB.Blazor.Styled.Core.SelectorRule.Children
  commentId: P:RTB.Blazor.Styled.Core.SelectorRule.Children
  href: RTB.Blazor.Styled.Core.SelectorRule.html#RTB_Blazor_Styled_Core_SelectorRule_Children
  name: Children
  nameWithType: SelectorRule.Children
  fullName: RTB.Blazor.Styled.Core.SelectorRule.Children
- uid: RTB.Blazor.Styled.Core
  commentId: N:RTB.Blazor.Styled.Core
  href: RTB.html
  name: RTB.Blazor.Styled.Core
  nameWithType: RTB.Blazor.Styled.Core
  fullName: RTB.Blazor.Styled.Core
  spec.csharp:
  - uid: RTB
    name: RTB
    href: RTB.html
  - name: .
  - uid: RTB.Blazor
    name: Blazor
    href: RTB.Blazor.html
  - name: .
  - uid: RTB.Blazor.Styled
    name: Styled
    href: RTB.Blazor.Styled.html
  - name: .
  - uid: RTB.Blazor.Styled.Core
    name: Core
    href: RTB.Blazor.Styled.Core.html
  spec.vb:
  - uid: RTB
    name: RTB
    href: RTB.html
  - name: .
  - uid: RTB.Blazor
    name: Blazor
    href: RTB.Blazor.html
  - name: .
  - uid: RTB.Blazor.Styled
    name: Styled
    href: RTB.Blazor.Styled.html
  - name: .
  - uid: RTB.Blazor.Styled.Core
    name: Core
    href: RTB.Blazor.Styled.Core.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: RTB.Blazor.Styled.Core.IStyleFragment
  commentId: T:RTB.Blazor.Styled.Core.IStyleFragment
  parent: RTB.Blazor.Styled.Core
  href: RTB.Blazor.Styled.Core.IStyleFragment.html
  name: IStyleFragment
  nameWithType: IStyleFragment
  fullName: RTB.Blazor.Styled.Core.IStyleFragment
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.String.Empty
  commentId: F:System.String.Empty
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string.empty
  name: Empty
  nameWithType: string.Empty
  fullName: string.Empty
  nameWithType.vb: String.Empty
  fullName.vb: String.Empty
- uid: RTB.Blazor.Styled.Core.SelectorRule.Selector*
  commentId: Overload:RTB.Blazor.Styled.Core.SelectorRule.Selector
  href: RTB.Blazor.Styled.Core.SelectorRule.html#RTB_Blazor_Styled_Core_SelectorRule_Selector
  name: Selector
  nameWithType: SelectorRule.Selector
  fullName: RTB.Blazor.Styled.Core.SelectorRule.Selector
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: RTB.Blazor.Styled.Core.DeclarationSet.IsEmpty
  commentId: P:RTB.Blazor.Styled.Core.DeclarationSet.IsEmpty
  href: RTB.Blazor.Styled.Core.DeclarationSet.html#RTB_Blazor_Styled_Core_DeclarationSet_IsEmpty
  name: IsEmpty
  nameWithType: DeclarationSet.IsEmpty
  fullName: RTB.Blazor.Styled.Core.DeclarationSet.IsEmpty
- uid: RTB.Blazor.Styled.Core.SelectorRule.Declarations*
  commentId: Overload:RTB.Blazor.Styled.Core.SelectorRule.Declarations
  href: RTB.Blazor.Styled.Core.SelectorRule.html#RTB_Blazor_Styled_Core_SelectorRule_Declarations
  name: Declarations
  nameWithType: SelectorRule.Declarations
  fullName: RTB.Blazor.Styled.Core.SelectorRule.Declarations
- uid: RTB.Blazor.Styled.Core.DeclarationSet
  commentId: T:RTB.Blazor.Styled.Core.DeclarationSet
  parent: RTB.Blazor.Styled.Core
  href: RTB.Blazor.Styled.Core.DeclarationSet.html
  name: DeclarationSet
  nameWithType: DeclarationSet
  fullName: RTB.Blazor.Styled.Core.DeclarationSet
- uid: RTB.Blazor.Styled.Core.ScopedWriter.WithSelector(System.String,System.Action)
  commentId: M:RTB.Blazor.Styled.Core.ScopedWriter.WithSelector(System.String,System.Action)
  isExternal: true
  href: RTB.Blazor.Styled.Core.ScopedWriter.html#RTB_Blazor_Styled_Core_ScopedWriter_WithSelector_System_String_System_Action_
  name: WithSelector(string, Action)
  nameWithType: ScopedWriter.WithSelector(string, Action)
  fullName: RTB.Blazor.Styled.Core.ScopedWriter.WithSelector(string, System.Action)
  nameWithType.vb: ScopedWriter.WithSelector(String, Action)
  fullName.vb: RTB.Blazor.Styled.Core.ScopedWriter.WithSelector(String, System.Action)
  name.vb: WithSelector(String, Action)
  spec.csharp:
  - uid: RTB.Blazor.Styled.Core.ScopedWriter.WithSelector(System.String,System.Action)
    name: WithSelector
    href: RTB.Blazor.Styled.Core.ScopedWriter.html#RTB_Blazor_Styled_Core_ScopedWriter_WithSelector_System_String_System_Action_
  - name: (
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Action
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action
  - name: )
  spec.vb:
  - uid: RTB.Blazor.Styled.Core.ScopedWriter.WithSelector(System.String,System.Action)
    name: WithSelector
    href: RTB.Blazor.Styled.Core.ScopedWriter.html#RTB_Blazor_Styled_Core_ScopedWriter_WithSelector_System_String_System_Action_
  - name: (
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.Action
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action
  - name: )
- uid: RTB.Blazor.Styled.Core.SelectorRule.Children*
  commentId: Overload:RTB.Blazor.Styled.Core.SelectorRule.Children
  href: RTB.Blazor.Styled.Core.SelectorRule.html#RTB_Blazor_Styled_Core_SelectorRule_Children
  name: Children
  nameWithType: SelectorRule.Children
  fullName: RTB.Blazor.Styled.Core.SelectorRule.Children
- uid: System.Collections.Generic.List{RTB.Blazor.Styled.Core.IStyleFragment}
  commentId: T:System.Collections.Generic.List{RTB.Blazor.Styled.Core.IStyleFragment}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<IStyleFragment>
  nameWithType: List<IStyleFragment>
  fullName: System.Collections.Generic.List<RTB.Blazor.Styled.Core.IStyleFragment>
  nameWithType.vb: List(Of IStyleFragment)
  fullName.vb: System.Collections.Generic.List(Of RTB.Blazor.Styled.Core.IStyleFragment)
  name.vb: List(Of IStyleFragment)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: RTB.Blazor.Styled.Core.IStyleFragment
    name: IStyleFragment
    href: RTB.Blazor.Styled.Core.IStyleFragment.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: RTB.Blazor.Styled.Core.IStyleFragment
    name: IStyleFragment
    href: RTB.Blazor.Styled.Core.IStyleFragment.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: RTB.Blazor.Styled.Core.SelectorRule
  commentId: T:RTB.Blazor.Styled.Core.SelectorRule
  parent: RTB.Blazor.Styled.Core
  href: RTB.Blazor.Styled.Core.SelectorRule.html
  name: SelectorRule
  nameWithType: SelectorRule
  fullName: RTB.Blazor.Styled.Core.SelectorRule
- uid: RTB.Blazor.Styled.Core.SelectorRule.#ctor*
  commentId: Overload:RTB.Blazor.Styled.Core.SelectorRule.#ctor
  href: RTB.Blazor.Styled.Core.SelectorRule.html#RTB_Blazor_Styled_Core_SelectorRule__ctor_System_String_
  name: SelectorRule
  nameWithType: SelectorRule.SelectorRule
  fullName: RTB.Blazor.Styled.Core.SelectorRule.SelectorRule
  nameWithType.vb: SelectorRule.New
  fullName.vb: RTB.Blazor.Styled.Core.SelectorRule.New
  name.vb: New
- uid: RTB.Blazor.Styled.Core.SelectorRule.Emit*
  commentId: Overload:RTB.Blazor.Styled.Core.SelectorRule.Emit
  href: RTB.Blazor.Styled.Core.SelectorRule.html#RTB_Blazor_Styled_Core_SelectorRule_Emit_RTB_Blazor_Styled_Core_ScopedWriter_
  name: Emit
  nameWithType: SelectorRule.Emit
  fullName: RTB.Blazor.Styled.Core.SelectorRule.Emit
- uid: RTB.Blazor.Styled.Core.IStyleFragment.Emit(RTB.Blazor.Styled.Core.ScopedWriter)
  commentId: M:RTB.Blazor.Styled.Core.IStyleFragment.Emit(RTB.Blazor.Styled.Core.ScopedWriter)
  parent: RTB.Blazor.Styled.Core.IStyleFragment
  href: RTB.Blazor.Styled.Core.IStyleFragment.html#RTB_Blazor_Styled_Core_IStyleFragment_Emit_RTB_Blazor_Styled_Core_ScopedWriter_
  name: Emit(ScopedWriter)
  nameWithType: IStyleFragment.Emit(ScopedWriter)
  fullName: RTB.Blazor.Styled.Core.IStyleFragment.Emit(RTB.Blazor.Styled.Core.ScopedWriter)
  spec.csharp:
  - uid: RTB.Blazor.Styled.Core.IStyleFragment.Emit(RTB.Blazor.Styled.Core.ScopedWriter)
    name: Emit
    href: RTB.Blazor.Styled.Core.IStyleFragment.html#RTB_Blazor_Styled_Core_IStyleFragment_Emit_RTB_Blazor_Styled_Core_ScopedWriter_
  - name: (
  - uid: RTB.Blazor.Styled.Core.ScopedWriter
    name: ScopedWriter
    href: RTB.Blazor.Styled.Core.ScopedWriter.html
  - name: )
  spec.vb:
  - uid: RTB.Blazor.Styled.Core.IStyleFragment.Emit(RTB.Blazor.Styled.Core.ScopedWriter)
    name: Emit
    href: RTB.Blazor.Styled.Core.IStyleFragment.html#RTB_Blazor_Styled_Core_IStyleFragment_Emit_RTB_Blazor_Styled_Core_ScopedWriter_
  - name: (
  - uid: RTB.Blazor.Styled.Core.ScopedWriter
    name: ScopedWriter
    href: RTB.Blazor.Styled.Core.ScopedWriter.html
  - name: )
