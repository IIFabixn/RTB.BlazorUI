@using RTB.BlazorUI.Helper
@using RTB.BlazorUI.Services.BusyTracker
@using RTB.BlazorUI.Services.Style

@inject IStyleRegistry Registry
@inject IBusyTracker Busy

@code {
    [Parameter] public RenderFragment<string?> ChildContent { get; set; } = default!;

    [Parameter] public string? Classname { get; set; }
    [Parameter] public EventCallback<string>? ClassnameChanged { get; set; }

    [Parameter] public string? Media { get; set; }

    private StyleBuilder _builder = StyleBuilder.Start;

    private string _prevStyle = string.Empty;
}

@{
    _builder.Clear();
}

<CascadingValue Value="@_builder">
    @ChildContent(Classname)
</CascadingValue>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var style = _builder.Build(Media);
        var hash = CssHasher.Hash(style);
        var cls = await Registry.GetOrCreate(style); // Create a unique class name

        if (cls != Classname)
        {
            Classname = cls;
            ClassnameChanged?.InvokeAsync(Classname);
            
            _ = Task.Run(() => Registry.InjectInto(style, Classname));
            _prevStyle = style;
            StateHasChanged();
        }
    }
}
