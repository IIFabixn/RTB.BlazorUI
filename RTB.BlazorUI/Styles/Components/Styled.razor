@using RTB.BlazorUI.Services.BusyTracker
@using RTB.BlazorUI.Services.Style

@inject IStyleRegistry Registry
@inject IBusyTracker Busy

@implements IAsyncDisposable

@code {
    [Parameter] public RenderFragment<string?> ChildContent { get; set; } = default!;

    [Parameter] public string Classname { get; set; } = string.Empty;
    [Parameter] public EventCallback<string>? ClassnameChanged { get; set; }

    [Parameter] public string? Media { get; set; }

    private readonly StyleBuilder _builder = StyleBuilder.Start;
    private string _prevStyle = string.Empty;
}

<CascadingValue Value="@_builder" IsFixed="true">
    @ChildContent(Classname)
</CascadingValue>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_builder.IsDirty) return;

        var style = _builder.Build(Media);

        if (string.IsNullOrEmpty(style)) return;
        if (style == _prevStyle) return; // No changes since last render

        var cls = Registry.GetOrCreate(style); // deterministic class name (no injection)

        if (cls != Classname)
        {
            Classname = cls;
            ClassnameChanged?.InvokeAsync(Classname);
        }

        await Registry.InjectInto(style, Classname);

        _prevStyle = style;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (!string.IsNullOrEmpty(Classname))
            await Registry.Remove(Classname);
    }
}
