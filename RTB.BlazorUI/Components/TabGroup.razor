@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Interfaces
@using RTB.BlazorUI.Services.Style
@using RTB.BlazorUI.Styles

@inherits RTBComponent

@implements IRegister<TabItem>

@code {
    [Parameter] public RenderFragment<(TabItem item, bool active)>? TabTemplate { get; set; }
    [Parameter] public RenderFragment Tabs { get; set; } = default!;

    [Parameter] public TabStyle? TabStyle { get; set; }
    [Parameter] public TabStyle? ActiveTabStyle { get; set; }

    [Parameter] public string? ContentClass { get; set; }
}

<CascadingValue Value="this">
    @Tabs
</CascadingValue>

<Styled Context="TabClass">
    <PreStyled Style="@TabStyle" />
    <Other Property="cursor" Value="pointer" />
    <Flex Direction="@Flex.AxisDirection.Row" JustifyContent="@Flex.Justify.Center" AlignItems="@Flex.Align.Center" />

    <GridView Rows="auto 1fr" Class="@CombineClass("TabGroup", Class)">
        <GridView Columns="@(string.Join(" ", _tabItems.Select(i => "1fr")))" ItemPlacement="@Styles.Helper.Place.Center">
            @foreach (var tab in _tabItems)
            {
                <Styled Context="InternalTabClass">
                    <Size FullWidth />

                    <div 
                        @key="tab.Guid"
                        @onclick="() => SelectedTab = tab.Title"
                         Class="@CombineClass("rtb-tab-item", InternalTabClass, TabClass)">
                        
                        @if (tab.TabContent is not null)
                        {
                            @tab.TabContent
                        }
                        else if (TabTemplate is not null)
                        {
                            @TabTemplate(new(tab, SelectedTab == tab.Title))
                        }
                    </div>
                </Styled>
            }
        </GridView>

        @SelectedTabContent
    </GridView>
</Styled>

@code {
    private List<TabItem> _tabItems = new List<TabItem>();
    private string? _selectedTab;
    private string? SelectedTab
    {
        get => _selectedTab;
        set => SetProperty(ref _selectedTab, value);
    }

    private RenderFragment? SelectedTabContent => _tabItems.FirstOrDefault(i => i.Title == SelectedTab)?.ChildContent;

    public void Register(TabItem tabItem)
    {
        if (!_tabItems.Contains(tabItem))
        {
            SelectedTab ??= tabItem.Title;
            _tabItems.Add(tabItem);

            StateHasChanged();
        }
    }

    public void Unregister(TabItem tabItem)
    {
        if (_tabItems.Contains(tabItem))
        {
            _tabItems.Remove(tabItem);
            if (SelectedTab == tabItem.Title)
            {
                SelectedTab = null;
            }

            StateHasChanged();
        }
    }
}
