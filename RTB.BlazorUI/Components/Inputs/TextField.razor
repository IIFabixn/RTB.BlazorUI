@using RTB.BlazorUI.Styles
@using System.Timers
@using RTB.BlazorUI.Styles.Helper

@inherits RTBComponent

@code {
    [Parameter] public string? LabelText { get; set; }
    [Parameter] public RenderFragment? Label { get; set;}
    [Parameter] public string? Placeholder { get; set; }

    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; } = default!;

    [Parameter] public string? LabelClass { get; set; }
    [Parameter] public string? InputClass { get; set; }

    [Parameter] public int DebounceMilliseconds { get; set; } = 300;
    [Parameter] public bool Immediate { get; set; }

    private readonly string _id = $"rtb-tf-{Guid.NewGuid():N}";
    private Timer? _debounce;

    private Task OnInput(ChangeEventArgs e)
    {
        var text = e.Value?.ToString();
        if (Immediate) return ValueChanged.InvokeAsync(text);

        _debounce?.Stop();
        _debounce ??= new() { AutoReset = false };
        _debounce.Interval = DebounceMilliseconds;
        _debounce.Elapsed += (_, _) => InvokeAsync(() => ValueChanged.InvokeAsync(text));
        _debounce.Start();
        return Task.CompletedTask;
    }
}

<GridView Rows="auto auto" Class="@Class">
    @if (Label is not null || !string.IsNullOrEmpty(LabelText))
    {
        <label for="@_id" class="@LabelClass">
            @Label
            @if (string.IsNullOrEmpty(LabelText) is false)
            {
                <Text>@LabelText</Text>
            }
        </label>
    }
    <Styled Context="InputStyle">
        <Other Property="outline" Value="none" />
        <Border Side="Border.BorderSide.None" />
        <Border Side="Border.BorderSide.Bottom" Color="@RTBColors.Black" Width="1" />

        <input id="@_id"
            value="@Value" 
            @onchange="@(e => ValueChanged.InvokeAsync((string?)e.Value))"
            @oninput="OnInput"
            placeholder="@Placeholder"
            class="@CombineClass("rtb-tf", Class, InputClass)" />
    </Styled>
</GridView>
